(self.webpackChunkfigment_documentation=self.webpackChunkfigment_documentation||[]).push([[5354],{2750:(e,t,a)=>{"use strict";a.d(t,{ZP:()=>l});var n=a(7462),s=(a(7294),a(3905)),r=a(5488),o=a(5162),i=a(7643);const d={toc:[{value:"Authentication",id:"authentication",level:3}]};function l(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"authentication"},"Authentication"),(0,s.kt)("div",null,"API calls require authentication with API key via ",(0,s.kt)("code",null,"Authorization")," ","request header or ",(0,s.kt)("code",null,"URL")," property. Calls are made to the"," ",(0,s.kt)("strong",null,a.network," ",a.service)," ","endpoint, hosted at ",(0,s.kt)("code",null,a.url),(0,s.kt)("br",null),(0,s.kt)("br",null)),"Here's some boilerplate to get you started."," ",(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"js-header",label:"Fetch with Header",mdxType:"TabItem"},(0,s.kt)(i.Z,{language:"js",mdxType:"CodeBlock"},`fetch("${a.url}${a.route}", {\n    method: 'POST', // can also be 'GET', 'PUT' or any appropriate method\n    headers: {\n        "Authorization" : "<api_key>",\n        "Content-Type": "application/json" // if method is 'POST'\n    },\n    body: JSON.stringify({\n      // JSON Payload\n    })\n})`)),(0,s.kt)(o.Z,{value:"js-parameter",label:"Fetch with Parameter",mdxType:"TabItem"},(0,s.kt)(i.Z,{language:"js",mdxType:"CodeBlock"},`fetch("${a.url}/apikey/{{apikey}}${a.route}", {\n    method: 'POST', // can also be 'GET', 'PUT' or any appropriate method\n    headers: {\n        "Content-Type": "application/json" // if method is 'POST'\n    },\n    body: JSON.stringify({\n      // JSON Payload\n    })\n})`)),(0,s.kt)(o.Z,{value:"curl-header",label:"CURL with Header",mdxType:"TabItem"},(0,s.kt)(i.Z,{language:"bash",mdxType:"CodeBlock"},`curl -X POST '${a.url}${a.route}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: <api_key>' \\\n--data '{\n  // JSON Payload\n}'`)),(0,s.kt)(o.Z,{value:"curl-parameter",label:"CURL with Parameter",mdxType:"TabItem"},(0,s.kt)(i.Z,{language:"bash",mdxType:"CodeBlock"},`curl -X POST '${a.url}/apikey/{{apikey}}${a.route}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  // JSON Payload\n}'`))))}l.isMDXComponent=!0},3976:(e,t,a)=>{"use strict";a.d(t,{Z:()=>r});var n=a(7294),s=a(6550);function r(e){let{network:t,networks:a,methods:r,service:o}=e;const i=(0,s.TH)(),d=(0,s.k6)();return n.createElement("div",null,n.createElement("label",null,"Change Network: "),n.createElement("select",{className:"custom-select",defaultValue:t,onChange:e=>{d.push(i.pathname.replace(/\/[^\/]+$/,`/${e.target.value}`))}},a.map((e=>n.createElement("option",{key:`${e.value}--n-option`,value:e.value},e.label)))),n.createElement("label",null," Jump to: "),n.createElement("select",{className:"custom-select",defaultValue:i.hash.replace("#","")||"",onChange:e=>{d.push(`#${e.target.value}`)}},r.map((e=>n.createElement("option",{key:`${e.name}--m-hash`,value:e.name.toLowerCase()},e.name)))))}},7297:(e,t,a)=>{"use strict";a.d(t,{Z:()=>s});var n=a(7294);function s(e){let{network:t,service:a}=e;return(0,n.useEffect)((()=>{const e=document.querySelector(".breadcrumbs__item.breadcrumbs__item--active");if(!e)return;e.querySelector("span.breadcrumbs__link").innerHTML=t;let n=e.previousElementSibling;n=n.cloneNode(!0),n.querySelector(".breadcrumbs__link span").innerHTML=a.label,n.querySelector(".breadcrumbs__link").href=a.link,e.insertAdjacentElement("beforebegin",n)}),[t]),n.createElement(n.Fragment,null)}},9638:(e,t,a)=>{"use strict";a.d(t,{S:()=>E});var n=a(7462),s=a(7294),r=a(8538),o=a(7748),i=a(381),d=a.n(i);const l={days:()=>({start:new Date(Date.now()-864e5).toISOString().split("T")[0],end:(new Date).toISOString().split("T")[0]}),polkadot(){const e=d()("2022-10-26","YYYY-MM-DD"),t=d()().diff(e,"days")+1,a=876+Math.ceil(1*t);return{start:a-30,end:a}},solana(){const e=Math.ceil(10.5),t=d()("2022-10-25","YYYY-MM-DD"),a=d()().diff(t,"days")+1,n=363+Math.ceil(.35*a);return{start:n-e,end:n}},near(){const e=114300,t=Math.ceil(800100),a=d()("2022-10-25","YYYY-MM-DD"),n=d()().diff(a,"days")+1,s=76953090+Math.ceil(n*e);return{start:s-t,end:s}}};var h=a(460),c=a.n(h),m=a(3746),u=a(6412);const p={Header:"Header_JfB9",blinker:"blinker_fwXa",Actions:"Actions_tjtQ",Container:"Container_SXTI",Editor:"Editor_gTle",Line:"Line_F8ZC",Code:"Code_xj0a"};function f(e){let{children:t="",header:a,actions:r,disabled:o=!1,status:i,onValueChange:d}=e;const l=(0,u.p)(),h=(0,s.useRef)(null);(0,s.useEffect)((()=>{const e=h.current?.querySelector("textarea"),t=e=>{const t=e.target;t.style.width=t.scrollWidth+"px"};return e.addEventListener("input",t),()=>e.removeEventListener("input",t)}),[]);return s.createElement("div",{ref:h},s.createElement(b,{actions:r,status:i},a),s.createElement("div",{className:p.Container},s.createElement(c(),{value:t,onValueChange:d,highlight:function(e){return void 0===e&&(e=""),s.createElement(m.ZP,(0,n.Z)({},m.lG,{theme:l,code:e,language:"json"}),(e=>{let{className:t,style:a,tokens:r,getLineProps:o,getTokenProps:i}=e;return s.createElement("div",{className:p.Code},r.map(((e,t)=>s.createElement("div",(0,n.Z)({key:t},o({line:e,key:t}),{className:p.Line}),s.createElement("span",{className:p.LineContent},e.map(((e,t)=>s.createElement("span",(0,n.Z)({key:t},i({token:e,key:t}))))))))))}))},disabled:o,ignoreTabKey:!0,padding:10,style:{...l.plain,overflow:"auto"},className:p.Editor})))}function b(e){let{children:t,actions:a=[],status:n}=e;return s.createElement("div",{className:p.Header,"data-status":n},s.createElement("span",null,t),s.createElement("span",{className:p.Actions},a.map(((e,t)=>{let{title:a,onClick:n,Component:r=a}=e;return s.createElement("button",{className:p.HeaderButton,key:`${t}:${a}`,title:a,onClick:n},r)}))))}var g=a(195);const v="overlayHeaderButton_IGf5";const y=function(e,t){const a=(0,s.useRef)(!1),n={error:void 0,data:void 0,loading:!1},[r,o]=(0,s.useReducer)(((e,t)=>{switch(t.type){case"loading":return{...n,loading:!0};case"fetched":return{...n,data:t.payload,loading:!1};case"error":return{...n,error:t.payload,loading:!1};default:return e}}),n);return{...r,fetchData:async function(n,s){void 0===s&&(s={}),o({type:"loading"});try{const r=await fetch(e+(n?`/${n}`:""),{...t,...s});if(!r.ok){let e,t,a;try{a=JSON.parse(await r.text()),e=await r.json(),t=JSON.stringify(e,null,2)}catch{}throw new Error(JSON.stringify(t,null,2)||JSON.stringify(a,null,2)||r.statusText)}const i=await r.json();if(a.current)return;return o({type:"fetched",payload:i}),i}catch(r){if(a.current)return;return o({type:"error",payload:r.message}),null}}}};var k,w=a(7643),x=a(4672);function j(){return j=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},j.apply(this,arguments)}const P=e=>{let{title:t,titleId:a,...n}=e;return s.createElement("svg",j({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":a},n),t?s.createElement("title",{id:a},t):null,k||(k=s.createElement("path",{d:"m10 16.5 6-4.5-6-4.5v9ZM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2Zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8Z",fill:"#0C3F5C"})))};var D;function I(){return I=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},I.apply(this,arguments)}const T=e=>{let{title:t,titleId:a,...n}=e;return s.createElement("svg",I({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":a},n),t?s.createElement("title",{id:a},t):null,D||(D=s.createElement("path",{d:"M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35Z",fill:"#0C3F5C"})))};function A(e){let{req:t,res:a,interactive:n,endpoint:r}=e;const[o,i]=(0,s.useState)(C(t.body)),[d,l]=(0,s.useState)(t.query),[h,c]=(0,s.useState)(S(a.body)),m="string"==typeof t.body&&0==t.body.indexOf("query"),{data:u,error:p,loading:b,fetchData:k}=y(r,{method:t.method,headers:{...t.headers,"Content-Type":m?"application/graphql":"application/json"},body:C(t.body)}),[j,D]=(0,s.useState)(null);(0,s.useEffect)((()=>{b?D("LOADING"):p||u?.error?D("ERROR"):u&&D("SUCCESS")}),[u,p,b]);const I=[n?{title:"Run request",onClick:async()=>{const e=await k(d,{body:o});e&&c(S(e))},Component:s.createElement(s.Fragment,null,s.createElement(P,null)," Run")}:null,{title:"Copy",onClick:()=>(0,g.Z)(o),Component:s.createElement(x.Z,{code:"",className:v})},n?{title:"Reset",onClick:()=>{D(null),l(t.query),i(C(t.body)),c(S(a.body))},Component:s.createElement(T,null)}:null].filter((e=>!!e));return s.createElement(s.Fragment,null,s.createElement(f,{header:"GET"===t.method?"Request Query "+(n?"(try it)":""):"Request Body "+(n?"(try it)":""),actions:I,disabled:!n,onValueChange:e=>{n&&("GET"===t.method?l(e):"POST"===t.method&&i(e))}},"GET"===t.method?d:o),s.createElement(w.Z,{title:j?"Response":"Example Response",language:"json"},p?`${p}`:h))}function S(e){return JSON.stringify(e,null,2)}function C(e){return"string"==typeof e?e:JSON.stringify(e,null,2)}const q="heading_REER";var N=a(9960),O=a(3905);const X={toc:[]};function z(e){let{components:t,...a}=e;return(0,O.kt)("wrapper",(0,n.Z)({},X,a,{components:t,mdxType:"MDXLayout"}),(0,O.kt)("details",{open:a.accordionOpen?"open":void 0},(0,O.kt)("summary",null,(0,O.kt)("span",{className:"open"},"Specification"),(0,O.kt)("span",{className:"closed"},"View Specification")),(0,O.kt)(r.D,{mdxType:"ReactMarkdown"},a.details)))}function V(e){let{name:t,content:a="",interactive:n,network:o,request:i,accordionOpen:d=!1,response:h,endpoint:c}=e;const m=c.includes("rewards-api"),u=["by day","account","address"].find((e=>t.includes(e))),p=["by epoch","by era"].find((e=>t.includes(e)))||t.startsWith("SOL");if(m&&p){const{start:e,end:t}=l[o]();i.body={...i.body,start:e,end:t}}else if(m&&u){const{start:e,end:t}=l.days();i.body={...i.body,start:e,end:t}}const[f,...b]=a.trim().split(/\n+/),g=b.join("\n");return s.createElement(s.Fragment,null,s.createElement("h2",{id:t.toLowerCase(),className:q,"data-method":i.method},s.createElement(N.Z,{to:`#${t.toLowerCase()}`},t)),s.createElement(r.D,null,f),s.createElement(A,{req:i,res:h,interactive:n,endpoint:c}),s.createElement(z,{details:g,accordionOpen:d}),s.createElement("hr",null))}function E(e){let{network:t,methods:a,service:r,proxy:i}=e;return s.createElement(s.Fragment,null,s.createElement("h3",null,"Available Methods"),a.map(((e,a)=>s.createElement(V,(0,n.Z)({key:t+a},e,{network:t,endpoint:`${i}/${r}/${t}`,accordionOpen:"node-api"!==r})))),s.createElement(o.Z,null))}z.isMDXComponent=!0},4569:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>d,metadata:()=>h,toc:()=>m});var n=a(7462),s=(a(7294),a(3905)),r=a(9638),o=a(3976),i=(a(7297),a(2750));const d={title:"Avalanche P-Chain",sidebar_position:0,pagination_prev:null,pagination_next:null,collapsed:!0,collapsible:!0,description:"Node API - Avalanche P-Chain",image:"img/logo.svg",keywords:["Node API","Avalanche P-Chain"]},l="Node API - Avalanche P-Chain",h={unversionedId:"api-reference/node-api/avalanche-p-chain",id:"api-reference/node-api/avalanche-p-chain",title:"Avalanche P-Chain",description:"Node API - Avalanche P-Chain",source:"@site/docs/api-reference/node-api/avalanche-p-chain.mdx",sourceDirName:"api-reference/node-api",slug:"/api-reference/node-api/avalanche-p-chain",permalink:"/api-reference/node-api/avalanche-p-chain",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Avalanche P-Chain",sidebar_position:0,pagination_prev:null,pagination_next:null,collapsed:!0,collapsible:!0,description:"Node API - Avalanche P-Chain",image:"img/logo.svg",keywords:["Node API","Avalanche P-Chain"]},sidebar:"docsSidebar"},c={},m=[],u={toc:m};function p(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"node-api---avalanche-p-chain"},"Node API - Avalanche P-Chain"),(0,s.kt)(o.Z,{service:"node-api",methods:[{name:"platform.addDelegator"},{name:"platform.addValidator"},{name:"platform.addSubnetValidator"},{name:"platform.createAddress"},{name:"platform.createBlockchain"},{name:"platform.createSubnet"},{name:"platform.exportAVAX"},{name:"platform.exportKey"},{name:"platform.getBalance"},{name:"platform.getBlock"},{name:"platform.getBlockchains"},{name:"platform.getBlockchainStatus"},{name:"platform.getCurrentSupply"},{name:"platform.getCurrentValidators"},{name:"platform.getHeight"},{name:"platform.getMaxStakeAmount"},{name:"platform.getMinStake"},{name:"platform.getPendingValidators"},{name:"platform.getRewardUTXOs"},{name:"platform.getStakingAssetID"},{name:"platform.getSubnets"},{name:"platform.getStake"},{name:"platform.getTimestamp"},{name:"platform.getTotalStake"},{name:"platform.getTx"},{name:"platform.getTxStatus"},{name:"platform.getUTXOs"},{name:"platform.getValidatorsAt"},{name:"platform.importAVAX"},{name:"platform.importKey"},{name:"platform.issueTx"},{name:"platform.listAddresses"},{name:"platform.sampleValidators"},{name:"platform.validatedBy"},{name:"platform.validates"}],networks:[{label:"Arbitrum",value:"arbitrum"},{label:"Avalanche C-Chain",value:"avalanche-c-chain"},{label:"Avalanche P-Chain",value:"avalanche-p-chain"},{label:"Avalanche X-Chain",value:"avalanche-x-chain"},{label:"BNB",value:"bnb"},{label:"Celo",value:"celo"},{label:"Cosmos LCD",value:"cosmos-lcd"},{label:"Cosmos Tendermint RPC",value:"cosmos-tendermint-rpc"},{label:"Ethereum",value:"ethereum"},{label:"Fantom",value:"fantom"},{label:"Kusama Sidecar",value:"kusama-sidecar"},{label:"Mina GraphQL",value:"mina-graphql"},{label:"NEAR",value:"near"},{label:"Optimism",value:"optimism"},{label:"Osmosis LCD",value:"osmosis-lcd"},{label:"Osmosis Tendermint RPC",value:"osmosis-tendermint-rpc"},{label:"Polkadot Sidecar",value:"polkadot-sidecar"},{label:"Polygon",value:"polygon"},{label:"Solana",value:"solana"}],network:"avalanche-p-chain",mdxType:"ApiReferenceNav"}),(0,s.kt)(i.ZP,{url:"https://avalanche--mainnet--rpc.datahub.figment.io",network:"Avalanche P Chain",service:"Node API",route:"/ext/bc/P",mdxType:"MakingCalls"}),(0,s.kt)(r.S,{methods:[{name:"platform.addDelegator",content:"Add a delegator to the Primary Network.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `nodeID` is the ID of the node to delegate to.\n- `startTime` is the Unix time when the delegator starts delegating.\n- `endTime` is the Unix time when the delegator stops delegating (and staked AVAX is returned).\n- `stakeAmount` is the amount of nAVAX the delegator is staking.\n- `rewardAddress` is the address the validator reward goes to, if there is one.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` is the user that pays the transaction fee.\n- `password` is `username`\u2018s password.\n\n### Response\n\n- `txID` is the ID of this transaction.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.addDelegator",params:{nodeID:"NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ",rewardAddress:"P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",startTime:1594102400,endTime:1604102400,stakeAmount:1e5,from:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.addDelegator",body:{jsonrpc:"2.0",result:{txID:"6pB3MtHUNogeHapZqMUBmx6N38ii3LzytVDrXuMovwKQFTZLs",changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u"},id:1}}},{name:"platform.addValidator",content:"Add a validator to the Primary Network.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `nodeID` is the node ID of the validator being added.\n- `startTime` is the Unix time when the validator starts validating the Primary Network.\n- `endTime` is the Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n- `stakeAmount` is the amount of nAVAX the validator is staking.\n- `rewardAddress` is the address the validator reward will go to, if there is one.\n- `delegationFeeRate` is the percent fee this validator charges when others delegate stake to them. Up to 4 decimal places allowed; additional decimal places are ignored. Must be between 0 and 100, inclusive. For example, if `delegationFeeRate` is `1.2345` and someone delegates to this validator, then when the delegation period is over, 1.2345% of the reward goes to the validator and the rest goes to the delegator.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` is the user that pays the transaction fee.\n- `password` is `username`\u2018s password.\n\n### Response\n\n- `txID` is the ID of this transaction.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.addValidator",params:{nodeID:"NodeID-ARCLrphAHZ28xZEBfUL7SVAmzkTZNe1LK",rewardAddress:"P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",from:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",startTime:1594102400,endTime:1604102400,stakeAmount:1e6,delegationFeeRate:10,username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.addValidator",body:{jsonrpc:"2.0",result:{txID:"6pb3mthunogehapzqmubmx6n38ii3lzytvdrxumovwkqftzls",changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u"},id:1}}},{name:"platform.addSubnetValidator",content:"Add a validator to a Subnet other than the Primary Network. The Validator must validate the Primary Network for the entire duration they validate this Subnet.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `nodeID` is the node ID of the validator being added to the Subnet. This validator must validate the Primary Network for the entire duration that it validates this Subnet.\n- `subnetID` is the ID of the Subnet we\u2019re adding a validator to.\n- `startTime` is the unix time when the validator starts validating the Subnet. It must be at or after the time that the validator starts validating the Primary Network\n- `endTime` is the unix time when the validator stops validating the Subnet. It must be at or before the time that the validator stops validating the Primary Network.\n- `weight` is the validator\u2019s weight used for sampling. If the validator\u2019s weight is 1 and the cumulative weight of all validators in the Subnet is 100, then this validator will be included in about 1 in every 100 samples during consensus. The cumulative weight of all validators in the Subnet must be at least `snow-sample-size`. For example, if there is only one validator in the Subnet, its weight must be at least `snow-sample-size` (default 20). Recall that a validator's weight can't be changed while it is validating, so take care to use an appropriate value.\n- `from` are the fund addresses that the user wants to use to pay for this operation. If omitted, use any of user's addresses as needed.\n- `changeAddr` is the address any change/left-over of the fund (specified by the `from` addresses) will be sent to. If omitted, change/left-over is sent to one of the addresses controlled by the user.\n- `username` is the user that pays the transaction fee.\n- `password` is `username`\u2018s password.\n\n### Response\n\n- `txID` is the ID of this transaction.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.addSubnetValidator",params:{nodeID:"NodeID-7xhw2mdxuds44j42tcb6u5579esbst3lg",subnetID:"zbfoww1ffkpvrfywpj1cvqrfnyesepdfc61hmu2n9jnghduel",startTime:1583524047,endTime:1604102399,weight:1,from:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.addSubnetValidator",body:{jsonrpc:"2.0",id:1,result:{txID:"2exafyvRNSE5ehwjhafBVt6CTntot7DFjsZNcZ54GSxBbVLcCm",changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u"}}}},{name:"platform.createAddress",content:"Create a new address controlled by the given user.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `username` is the user that pays the transaction fee.\n- `password` is `username`\u2018s password.\n\n### Response\n\n- new `address` generated controlled by the given user.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.createAddress",params:{username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.createAddress",body:{jsonrpc:"2.0",result:{address:"P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"},id:1}}},{name:"platform.createBlockchain",content:"Create a new blockchain. Currently only supports the creation of new instances of the AVM and the Timestamp VM.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `subnetID` is the ID of the Subnet that validates the new blockchain. The Subnet must exist and can\u2019t be the Primary Network.\n- `vmID` is the ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.\n- `name` is a human-readable name for the new blockchain. Not necessarily unique.\n- `genesisData` is the byte representation of the genesis state of the new blockchain encoded in the format specified by the `encoding` parameter.\n- `encoding` specifies the format to use for `genesisData`. Can only be `hex` when a value is provided. Virtual Machines should have a static API method named `buildGenesis` that can be used to generate `genesisData`\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` is the user that pays the transaction fee. This user must have a sufficient number of the subnet\u2019s control keys.\n- `password` is `username`\u2018s password.\n\n### Response\n\n- `txID` is the ID of this transaction.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.createBlockchain",params:{vmID:"timestamp",subnetID:"2bRCr6B4MiEfSjidDwxDpdCyviwnfUVqB2HGwhm947w9YYqb7r",name:"My new timestamp",genesisData:"0x07000000000000000000000000000000000000000000000000000000000000000016943a",encoding:"hex",from:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.createBlockchain",body:{jsonrpc:"2.0",result:{txID:"2TBnyFmST7TirNm6Y6z4863zusRVpWi5Cj1sKS9bXTUmu8GfeU",changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u"},id:1}}},{name:"platform.createSubnet",content:"Create a new Subnet.\n\nThe Subnet\u2019s ID is the same as this transaction\u2019s ID.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- In order to add a validator to this Subnet, `threshold` signatures are required from the addresses in `controlKeys`\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` is the user that pays the transaction fee.\n- `password` is `username`\u2018s password.\n\n### Response\n\n- `txID` is the ID of this transaction.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.createSubnet",params:{controlKeys:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5","P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],threshold:2,from:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.createSubnet",body:{jsonrpc:"2.0",result:{txID:"hJfC5xGhtjhCGBh1JWn3vZ51KJP696TZrsbadPHNbQG2Ve5yd"},id:1}}},{name:"platform.exportAVAX",content:"Send AVAX from an address on the P-Chain to an address on the X-Chain or C-Chain. After issuing this transaction, you must call the X-Chain's `avm.import` or C-Chain's `avax.import` with assetID `AVAX` to complete the transfer.\n\n### Parameters\n\n- `amount` is the amount of nAVAX to send.\n- `to` is the address on the X-Chain or C-Chain to send the AVAX to.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` is the user sending the AVAX and paying the transaction fee.\n- `password` is `username`\u2018s password.\n\n### Response\n\n- `txID` is the ID of this transaction.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.exportAVAX",params:{to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",amount:1,from:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.exportAVAX",body:{jsonrpc:"2.0",result:{txID:"2Kz69TNBSeABuaVjKa6ZJCTLobbe5xo9c5eU8QwdUSvPo2dBk3",changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u"},id:1}}},{name:"platform.exportKey",content:"Get the private key that controls a given address. The returned private key can be added to a user with `platform.importKey`.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `username` is the user that controls `address`.\n- `password` is `username`\u2018s password.\n- `address` for which you want to get the `privateKey`.\n\n### Response\n\n- `privateKey` is the string representation of the private key that controls `address`.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"platform.exportKey",params:{username:"myUsername",password:"myPassword",address:"P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.exportKey",body:{jsonrpc:"2.0",id:1,result:{privateKey:"PrivateKey-Lf49kAJw3CbaL783vmbeAJvhscJqC7vi5yBYLxw2XfbzNS5RS"}}}},{name:"platform.getBalance",content:"Get the balance of AVAX controlled by a given address.\n\n### Parameters\n\n- `address` is the address to get the balance of.\n\n### Response\n\n- `balance` is the total balance, in nAVAX.\n- `unlocked` is the unlocked balance, in nAVAX.\n- `lockedStakeable` is the locked stakeable balance, in nAVAX.\n- `lockedNotStakeable` is the locked and not stakeable balance, in nAVAX.\n- `utxoIDs` are the IDs of the UTXOs that reference `address`.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"platform.getBalance",params:{address:"P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getBalance",body:{jsonrpc:"2.0",result:{balance:"20000000000000000",unlocked:"10000000000000000",lockedStakeable:"10000000000000000",lockedNotStakeable:"0",utxoIDs:[{txID:"11111111111111111111111111111111LpoYY",outputIndex:1},{txID:"11111111111111111111111111111111LpoYY",outputIndex:0}]},id:1}}},{name:"platform.getBlock",content:"Get a block by its ID.\n\n### Parameters\n\n- `blockID` is the block ID. It should be in cb58 format.\n- `encoding` is the encoding format to use. Can be either `hex` or `json`. Defaults to `hex`.\n\n### Response\n\n- `block` is the transaction encoded to `encoding`.\n- `encoding` is the `encoding`.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getBlock",params:{blockID:"d7WYmb8VeZNHsny3EJCwMm6QA37s1EHwMxw1Y71V3FqPZ5EFG",encoding:"hex"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getBlock (Hex example)",body:{jsonrpc:"2.0",result:{block:"0x00000000000309473dc99a0851a29174d84e522da8ccb1a56ac23f7b0ba79f80acce34cf576900000000000f4241000000010000001200000001000000000000000000000000000000000000000000000000000000000000000000000000000000011c4c57e1bcb3c567f9f03caa75563502d1a21393173c06d9d79ea247b20e24800000000021e67317cbc4be2aeb00677ad6462778a8f52274b9d605df2591b23027a87dff000000050000000338e0465f0000000100000000000000000427d4b22a2a78bcddd456742caf91b56badbff985ee19aef14573e7343fd6520000000121e67317cbc4be2aeb00677ad6462778a8f52274b9d605df2591b23027a87dff000000070000000338d1041f0000000000000000000000010000000195a4467dd8f939554ea4e6501c08294386938cbf000000010000000900000001c79711c4b48dcde205b63603efef7c61773a0eb47efb503fcebe40d21962b7c25ebd734057400a12cce9cf99aceec8462923d5d91fffe1cb908372281ed738580119286dde",encoding:"hex"},id:1}}},{name:"platform.getBlockchains",content:"Get all the blockchains that exist (excluding the P-Chain).\n\n### Parameters\n\n- None\n\n### Response\n\n- `blockchains` is all of the blockchains that exists on the Avalanche network.\n - `name` is the human-readable name of this blockchain.\n - `id` is the blockchain\u2019s ID.\n - `subnetID` is the ID of the Subnet that validates this blockchain.\n - `vmID` is the ID of the Virtual Machine the blockchain runs.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getBlockchains",params:{},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getBlockchains",status:"OK",code:200,body:{jsonrpc:"2.0",result:{blockchains:[{id:"2jRZvKtXY5nyWTqRwFh1KMHGrCRxJoULu4r2CsayWRnjdDGbV1",name:"StepNetwork",subnetID:"7f9jciLEX25NPJEaAz1X7XF44B1Q9UBwq6PdnCHm5mnUq1e1C",vmID:"dkjnKTbCTozMmvJJETzrz8sYVs7vSKzkGShHoa493UcQEweU6"},{id:"2VDqgWTD4wBw3mrs6TVpQpXKgJfiEc8RS7tdyigtWqgB9PDHDU",name:"StepNetwork",subnetID:"ubYm3dgKcQqioeJimTH5YCRDuR1BBMaoaefEt1pywjJnUFvqJ",vmID:"dkjnKTbCTozMmvJJETzrz8sYVs7vSKzkGShHoa493UcQEweU6"}]},id:1}}},{name:"platform.getBlockchainStatus",content:"Get the status of a blockchain.\n\n### Parameters\n\n- `blockchainID` ID of the blockchain to check the status for.\n\n### Response\n\n- `status` is one of:\n - `Validating`: The blockchain is being validated by this node.\n - `Created`: The blockchain exists but isn\u2019t being validated by this node.\n - `Preferred`: The blockchain was proposed to be created and is likely to be created but the transaction isn\u2019t yet accepted.\n - `Syncing`: This node is participating in this blockchain as a non-validating node.\n - `Unknown`: The blockchain either wasn\u2019t proposed or the proposal to create it isn\u2019t preferred. The proposal may be resubmitted.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getBlockchainStatus",params:{blockchainID:"2NbS4dwGaf2p1MaXb65PrkZdXRwmSX4ZzGnUu7jm3aykgThuZE"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getBlockchainStatus",status:"OK",code:200,body:{jsonrpc:"2.0",result:{status:"Unknown"},id:1}}},{name:"platform.getCurrentSupply",content:"Returns an upper bound on the number of AVAX that exist. This is an upper bound because it does not account for burnt tokens, including transaction fees.\n\n### Parameters\n\n- None\n\n### Response\n\n- `supply` is an upper bound on the number of AVAX that exist, denominated in nAVAX.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getCurrentSupply",params:{},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getCurrentSupply",status:"OK",code:200,body:{jsonrpc:"2.0",result:{supply:"411043063936396639"},id:1}}},{name:"platform.getCurrentValidators",content:"List the current validators of the given Subnet.\n\n### Parameters\n\n- `subnetID` is the Subnet whose current validators are returned. If omitted, returns the current validators of the Primary Network (optional). \n- `nodeIDs` is a list of the nodeIDs of current validators to request. If omitted, all current validators are returned. If a specified nodeID is not in the set of current validators, it will not be included in the response (optional).\n\n### Response\n\n- `validators`:\n  - `txID` is the validator transaction.\n  - `startTime` is the Unix time when the validator starts validating the Subnet.\n  - `endTime` is the Unix time when the validator stops validating the Subnet.\n  - `stakeAmount` is the amount of nAVAX this validator staked. Omitted if `subnetID` is not the Primary Network.\n  - `nodeID` is the validator\u2019s node ID.\n  - `weight` is the validator\u2019s weight when sampling validators. Omitted if `subnetID` is the Primary Network.\n  - `rewardOwner` is an `OutputOwners` output which includes `locktime`, `threshold` and array of `addresses`. Omitted if `subnetID` is not the Primary Network.\n  - `potentialReward` is the potential reward earned from staking. Omitted if `subnetID` is not the Primary Network.\n  - `delegationFeeRate` is the percent fee this validator charges when others delegate stake to them. Omitted if `subnetID` is not the Primary Network.\n  - `uptime` is the % of time the queried node has reported the peer as online. Omitted if `subnetID` is not the Primary Network.\n  - `connected` is if the node is connected and tracks the Subnet.\n  - `delegators` is the list of delegators to this validator. Omitted if `subnetID` is not the Primary Network.\n    - `txID` is the delegator transaction.\n    - `startTime` is the Unix time when the delegator started.\n    - `endTime` is the Unix time when the delegator stops.\n    - `stakeAmount` is the amount of nAVAX this delegator staked.\n    - `nodeID` is the validating node\u2019s node ID.\n    - `rewardOwner` is an `OutputOwners` output which includes `locktime`, `threshold` and array of `addresses`.\n    - `potentialReward` is the potential reward earned from staking",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getCurrentValidators",params:{},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getCurrentValidators",body:{jsonrpc:"2.0",result:{validators:[{txID:"2NNkpYTGfTFLSGXJcHtVv6drwVU2cczhmjK2uhvwDyxwsjzZMm",startTime:"1600368632",endTime:"1602960455",stakeAmount:"2000000000000",nodeID:"NodeID-5mb46qkSBj81k9g9e4VFjGGSbaaSLFRzD",rewardOwner:{locktime:"0",threshold:"1",addresses:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"]},potentialReward:"117431493426",delegationFee:"10.0000",uptime:"0.0000",connected:!1,delegators:[{txID:"Bbai8nzGVcyn2VmeYcbS74zfjJLjDacGNVuzuvAQkHn1uWfoV",startTime:"1600368523",endTime:"1602960342",stakeAmount:"25000000000",nodeID:"NodeID-5mb46qkSBj81k9g9e4VFjGGSbaaSLFRzD",rewardOwner:{locktime:"0",threshold:"1",addresses:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"]},potentialReward:"11743144774"}]}]},id:1}}},{name:"platform.getHeight",content:"Returns the height of the last accepted block.\n\n### Parameters\n\n- None\n\n### Response\n\n- `height` of the last accepted block.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getHeight",params:{},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getHeight",status:"OK",code:200,body:{jsonrpc:"2.0",result:{height:"2067046"},id:1}}},{name:"platform.getMaxStakeAmount",content:"Returns the maximum amount of nAVAX staking to the named node during a particular time period.\n\n### Parameters\n\n- `subnetID` is a Buffer or cb58 string representing Subnet\n- `nodeID` is a string representing ID of the node whose stake amount is required during the given duration\n- `startTime` is a big number denoting start time of the duration during which stake amount of the node is required.\n- `endTime` is a big number denoting end time of the duration during which stake amount of the node is required.\n\n### Response\n\n- `amount` the maximum amount of nAVAX staking to the named node.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getMaxStakeAmount",params:{subnetID:"11111111111111111111111111111111LpoYY",nodeID:"NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg",startTime:1644240334,endTime:1644240634},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getMaxStakeAmount",body:{jsonrpc:"2.0",result:{amount:"2000000000000000"},id:1}}},{name:"platform.getMinStake",content:"Get the minimum amount of AVAX required to validate the Primary Network and the minimum amount of AVAX that can be delegated.\n\n### Parameters\n\n- None\n\n### Response\n\n- `minValidatorStake` - The minimum amount of AVAX required to validate the Primary Network.\n- `minDelegatorStake` - The minimum amount of AVAX that can be delegated.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"platform.getMinStake"},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getMinStake",status:"OK",code:200,body:{jsonrpc:"2.0",result:{minValidatorStake:"2000000000000",minDelegatorStake:"25000000000"},id:1}}},{name:"platform.getPendingValidators",content:"List the validators in the pending validator set of the specified Subnet. Each validator is not currently validating the Subnet but will in the future.\n\n### Parameters\n\n- `subnetID` is the Subnet whose current validators are returned. If omitted, returns the current validators of the Primary Network (optional).\n- `nodeIDs` is a list of the nodeIDs of pending validators to request. If omitted, all pending validators are returned. If a specified nodeID is not in the set of pending validators, it will not be included in the response (optional).\n\n### Response\n\n- `validators`:\n  - `txID` is the validator transaction.\n  - `startTime` is the Unix time when the validator starts validating the Subnet.\n  - `endTime` is the Unix time when the validator stops validating the Subnet.\n  - `stakeAmount` is the amount of nAVAX this validator staked. Omitted if `subnetID` is not the Primary Network.\n  - `nodeID` is the validator\u2019s node ID.\n  - `connected` if the node is connected and tracks the Subnet.\n  - `weight` is the validator\u2019s weight when sampling validators. Omitted if `subnetID` is the Primary Network.\n- `delegators`:\n  - `txID` is the delegator transaction.\n  - `startTime` is the Unix time when the delegator starts.\n  - `endTime` is the Unix time when the delegator stops.\n  - `stakeAmount` is the amount of nAVAX this delegator staked. Omitted if `subnetID` is not the Primary Network.\n  - `nodeID` is the validating node\u2019s node ID.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getPendingValidators",params:{},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getPendingValidators",status:"OK",code:200,body:{jsonrpc:"2.0",result:{validators:[],delegators:[{txID:"28tK2Tb753BoHJHJE5V5sidvWn89hL8ieqVY8GQVgwqMs3M3PF",startTime:"1661241300",endTime:"1663056242",stakeAmount:"28092568333",nodeID:"NodeID-LwXHkWth4f244zZ4j5wu5fZmrYDzJ6bda"},{txID:"zEWCeMqZpxytLgfSzshz1hgpqdgc44Zx51D6XjMWjTjqL3kok",startTime:"1661241424",endTime:"1673791227",stakeAmount:"38444331970",nodeID:"NodeID-DXaXYKoAHmysSuzPC2c91LzwPku6XYfmZ"}]},id:1}}},{name:"platform.getRewardUTXOs",content:"Returns the UTXOs that were rewarded after the provided transaction's staking or delegation period ended.\n\n### Parameters\n\n- `txID` is the ID of the staking or delegating transaction.\n- `encoding` specifies the format for the returned UTXOs. Can only be `hex` when a value is provided (optional).\n\n### Response\n\n- `numFetched` is the number of returned UTXOs\n- `utxos` is an array of encoded reward UTXOs\n- `encoding` specifies the format for the returned UTXOs. Can only be `hex` when a value is provided.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getRewardUTXOs",params:{txID:"2nmH8LithVbdjaXsxVQCQfXtzN9hBbmebrsaEYnLM9T32Uy2Y5"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getRewardUTXOs",body:{jsonrpc:"2.0",result:{numFetched:"2",utxos:["0x0000a195046108a85e60f7a864bb567745a37f50c6af282103e47cc62f036cee404700000000345aa98e8a990f4101e2268fab4c4e1f731c8dfbcffa3a77978686e6390d624f000000070000000000000001000000000000000000000001000000018ba98dabaebcd83056799841cfbc567d8b10f216c1f01765","0x0000ae8b1b94444eed8de9a81b1222f00f1b4133330add23d8ac288bffa98b85271100000000345aa98e8a990f4101e2268fab4c4e1f731c8dfbcffa3a77978686e6390d624f000000070000000000000001000000000000000000000001000000018ba98dabaebcd83056799841cfbc567d8b10f216473d042a"],encoding:"hex"},id:1}}},{name:"platform.getStakingAssetID",content:"Retrieve an assetID for a subnet\u2019s staking asset. Currently, this only returns the Primary Network\u2019s staking assetID.\n\n### Parameters\n\n- `subnetID` is the Subnet whose assetID is requested (optional).\n\n### Response\n\n- `assetID` is the assetID for a subnet\u2019s staking asset.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getStakingAssetID",params:{subnetID:"11111111111111111111111111111111LpoYY"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getStakingAssetID",status:"OK",code:200,body:{jsonrpc:"2.0",result:{assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z"},id:1}}},{name:"platform.getSubnets",content:"Get info about the Subnets.\n\n### Parameters\n\n- `ids` are the IDs of the Subnets to get information about. If omitted, gets information about all Subnets.\n\n### Response\n\n- `id` is the Subnet\u2019s ID.\n- `threshold` signatures from addresses in `controlKeys` are needed to add a validator to the Subnet.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getSubnets",params:{ids:["hW8Ma7dLMA7o4xmJf3AXBbo17bXzE7xnThUd3ypM4VAWo1sNJ"]},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getSubnets",body:{jsonrpc:"2.0",result:{subnets:[{id:"hW8Ma7dLMA7o4xmJf3AXBbo17bXzE7xnThUd3ypM4VAWo1sNJ",controlKeys:["KNjXsaA1sZsaKCD1cd85YXauDuxshTes2","Aiz4eEt5xv9t4NCnAWaQJFNz5ABqLtJkR"],threshold:"2"}]},id:1}}},{name:"platform.getStake",content:"Get the amount of nAVAX staked by a set of addresses. The amount returned does not include staking rewards.\n\n### Parameters\n\n- `addresses` are the addresses to get information about.\n\n### Response\n\n- `staked` is the amount of nAVAX staked by addresses provided.\n- `stakedOutputs` are the string representation of staked outputs.\n- `encoding` specifies the format for the returned outputs.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getStake",params:{addresses:["P-avax1pmgmagjcljjzuz2ve339dx82khm7q8getlegte"]},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getStake",body:{jsonrpc:"2.0",result:{staked:"26870333254",stakedOutputs:["0x000021e67317cbc4be2aeb00677ad6462778a8f52274b9d605df2591b23027a87dff00000007000000064198bf46000000000000000000000001000000010ed1bea258fca42e094ccc625698eab5f7e01d190f0f332d"],encoding:"hex"},id:1}}},{name:"platform.getTimestamp",content:"Get the current P-Chain timestamp.\n\n### Parameters\n\n- None\n\n### Response\n\n- `timestamp` current P-Chain timestamp.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getTimestamp",params:{},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getTimestamp",status:"OK",code:200,body:{jsonrpc:"2.0",result:{timestamp:"2022-08-23T08:11:29Z"},id:1}}},{name:"platform.getTotalStake",content:"Get the total amount of nAVAX staked on the Primary Network.\n\n### Parameters\n\n- `subnetID` (optional)\n\n### Response\n\n- `stake` - The total amount of nAVAX staked on the Primary Network",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getTotalStake",params:{},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getTotalStake (Primary Network example)",status:"OK",code:200,body:{jsonrpc:"2.0",result:{stake:"264473785564041383"},id:1}}},{name:"platform.getTx",content:'Gets a transaction by its ID.\n\n### Parameters\n\n- `txID` is the ID of the transaction.\n- Optional `encoding` parameter to specify the format for the returned transaction. Can be either "hex" or "json". Defaults to "hex".\n\n### Response\n\n- `tx` - Transaction details for the given transaction ID.\n- `encoding` - parameter to specify the format for the returned transaction. Can be either "hex" or "json".',request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getTx",params:{txID:"tWbo1BwoBXLkmR48yerS64zdaMeha3Td1ev5cDZUyCAToT5SG",encoding:"json"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getTx (JSON example)",status:"OK",code:200,body:{jsonrpc:"2.0",result:{tx:{unsignedTx:{networkID:1,blockchainID:"11111111111111111111111111111111LpoYY",outputs:[],inputs:[{txID:"2BhkKSwqubHMsYqVBQvwtgHWczVUc4jPacZ1zaTGLZSpWgC9L5",outputIndex:0,assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",fxID:"spdxUxVJQbX85MGxMHbKw1sHxMnSqJ3QBzDyDYEP3h6TLuxqQ",input:{amount:8649063,signatureIndices:[0]}},{txID:"2BhkKSwqubHMsYqVBQvwtgHWczVUc4jPacZ1zaTGLZSpWgC9L5",outputIndex:1,assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",fxID:"spdxUxVJQbX85MGxMHbKw1sHxMnSqJ3QBzDyDYEP3h6TLuxqQ",input:{amount:8999e7,signatureIndices:[0]}},{txID:"2BhkKSwqubHMsYqVBQvwtgHWczVUc4jPacZ1zaTGLZSpWgC9L5",outputIndex:2,assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",fxID:"spdxUxVJQbX85MGxMHbKw1sHxMnSqJ3QBzDyDYEP3h6TLuxqQ",input:{amount:257218557,signatureIndices:[0]}}],memo:"0x456e6e6f57616c6c6574204176616c616e636865204578706f7274",SyntacticallyVerified:!0,destinationChain:"2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",exportedOutputs:[{assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",fxID:"spdxUxVJQbX85MGxMHbKw1sHxMnSqJ3QBzDyDYEP3h6TLuxqQ",output:{addresses:["P-avax19fhg5vqwusqsphq85puwqsulmsvsvsct28scl3"],amount:90254867620,locktime:0,threshold:1}}]},credentials:[{signatures:["0x47c7347f1d7b77f59a3fa0a4c257db3974c2e0fee67bcd6e54584a0835167afe630d3a2208853584ea2877da2d382b2db03f697fcf1f9982b03b761c3ed68c6600"]},{signatures:["0x47c7347f1d7b77f59a3fa0a4c257db3974c2e0fee67bcd6e54584a0835167afe630d3a2208853584ea2877da2d382b2db03f697fcf1f9982b03b761c3ed68c6600"]},{signatures:["0x47c7347f1d7b77f59a3fa0a4c257db3974c2e0fee67bcd6e54584a0835167afe630d3a2208853584ea2877da2d382b2db03f697fcf1f9982b03b761c3ed68c6600"]}]},encoding:"json"},id:1}}},{name:"platform.getTxStatus",content:"Gets a transaction\u2019s status by its ID. If the transaction was dropped, response will include a reason field with more information why the transaction was dropped.\n\n### Parameters\n\n- `txID` is the ID of the transaction.\n\n### Response\n\n- `status` is one of:\n - `Committed`: The transaction is (or will be) accepted by every node\n - `Processing`: The transaction is being voted on by this node\n - `Dropped`: The transaction will never be accepted by any node in the network, check `reason` field for more information\n - `Unknown`: The transaction hasn\u2019t been seen by this node",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getTxStatus",params:{txID:"tWbo1BwoBXLkmR48yerS64zdaMeha3Td1ev5cDZUyCAToT5SG"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getTxStatus",status:"OK",code:200,body:{jsonrpc:"2.0",result:{status:"Committed"},id:1}}},{name:"platform.getUTXOs",content:"Gets the UTXOs that reference a given set of addresses.\n\n### Parameters\n\n- `addresses` given set of addresses to get the the UTXOs\n- `limit` At most limit UTXOs are returned. If limit is omitted or greater than 1024, it is set to 1024.\n- `startIndex` - If `startIndex` is omitted, will fetch all UTXOs up to limit.\n- `encoding` specifies the format for the returned UTXOs. Can only be `hex` when a value is provided.\n\n### Response\n\n- `utxos` is a list of UTXOs such that each UTXO references at least one address in `addresses`.\n- At most `limit` UTXOs are returned. If `limit` is omitted or greater than 1024, it is set to 1024.\n- This method supports pagination. `endIndex` denotes the last UTXO returned. To get the next set of UTXOs, use the value of `endIndex` as `startIndex` in the next call.\n- If `startIndex` is omitted, will fetch all UTXOs up to `limit`.\n- When using pagination (ie when `startIndex` is provided), UTXOs are not guaranteed to be unique across multiple calls. That is, a UTXO may appear in the result of the first call, and then again in the second call.\n- When using pagination, consistency is not guaranteed across multiple calls. That is, the UTXO set of the addresses may have changed between calls.\n- `encoding` specifies the format for the returned UTXOs. Can only be `hex` when a value is provided.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"platform.getUTXOs",params:{addresses:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5","P-avax1d09qn852zcy03sfc9hay2llmn9hsgnw4tp3dv6"],limit:5,encoding:"hex"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getUTXOs",status:"OK",code:200,body:{jsonrpc:"2.0",result:{numFetched:"0",utxos:[],endIndex:{address:"P-avax1d09qn852zcy03sfc9hay2llmn9hsgnw4tp3dv6",utxo:"11111111111111111111111111111111LpoYY"},encoding:"hex"},id:1}}},{name:"platform.getValidatorsAt",content:"Get the validators and their weights of a Subnet or the Primary Network at a given P-Chain height.\n\n### Parameters\n\n- `height` is the P-Chain height to get the validator set at.\n- `subnetID` is the Subnet ID to get the validator set of. If not given, gets validator set of the Primary Network.\n\n### Response\n\n- `validators` - The validators and their weights.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.getValidatorsAt",params:{height:2067137},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.getValidatorsAt",status:"OK",code:200,body:{jsonrpc:"2.0",result:{validators:{"NodeID-12dyQ7nhRzsNSiFzEoW1RWK819Zkssf5g":5735539268404,"NodeID-13e5BTpgRh2WBWKB3uSZeSoLgKtNUhunG":29592498533559,"NodeID-14B6jvGvZaaXUrTPMuTxHdWLG4EDvBPxy":2124342115020,"NodeID-15hq3yMVXeHiTULyPVNcsGbgiPyBKu2wd":2025e9,"NodeID-168kTGVaSDD9CsPQzbqMpQg6zUvKatqr6":35550838989367}},id:1}}},{name:"platform.importAVAX",content:'Complete a transfer of AVAX from the X-Chain, or C-Chain to the P-Chain.\n\nBefore this method is called, you must call the X-Chain\u2019s `avm.export` or C-Chain\u2019s `avax.export` method with assetID AVAX to initiate the transfer.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `to` is the ID of the address the AVAX is imported to. This must be the same as the `to` argument in the corresponding call to the X-Chain\u2019s or C-Chain\'s `export`.\n- `sourceChain` is the chain the funds are coming from. Must be either `"X"` or `"C"`.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` is the user that controls from and change addresses.\n- `password` is `username`\u2018s password.\n\n### Response\n\n- `txID` ID of this transaction.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.',request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.importAVAX",params:{to:"P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",from:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.importAVAX",body:{jsonrpc:"2.0",result:{txID:"P63NjowXaQJXt5cmspqdoD3VcuQdXUPM5eoZE2Vcg63aVEx8R",changeAddr:"P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u"},id:1}}},{name:"platform.importKey",content:"Give a user control over an address by providing the private key that controls the address.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `username`\n- `password`\n- Add `privateKey` to `username`\u2018s set of private keys. \n\n### Response\n\n- `address` is the address username now controls with the private key.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"platform.importKey",params:{username:"myUsername",password:"myPassword",privateKey:"PrivateKey-2w4XiXxPfQK4TypYqnohRL8DRNTz9cGiGmwQ1zmgEqD9c9KWLq"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.importKey",body:{jsonrpc:"2.0",id:1,result:{address:"P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"}}}},{name:"platform.issueTx",content:"Issue a transaction to the Platform Chain.\n\n### Parameters\n\n- `tx` is the byte representation of a transaction.\n- `encoding` specifies the encoding format for the transaction bytes. Can only be `hex` when a value is provided.\n\n### Response\n\n- `txID` is the transaction\u2019s ID.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.issueTx",params:{tx:"0x00000009de31b4d8b22991d51aa6aa1fc733f23a851a8c9400000000000186a0000000005f041280000000005f9ca900000030390000000000000001fceda8f90fcb5d30614b99d79fc4baa29307762668f16eb0259a57c2d3b78c875c86ec2045792d4df2d926c40f829196e0bb97ee697af71f5b0a966dabff749634c8b729855e937715b0e44303fd1014daedc752006011b730",encoding:"hex"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.issueTx",body:{jsonrpc:"2.0",result:{txID:"G3BuH6ytQ2averrLxJJugjWZHTRubzCrUZEXoheG5JMqL5ccY"},id:1}}},{name:"platform.listAddresses",content:"List addresses controlled by the given user\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `username`\n- `password`\n\n### Response\n\n- `addresses` - Addresses controlled by the given user",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.listAddresses",params:{username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.listAddresses",body:{jsonrpc:"2.0",result:{addresses:["P-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"]},id:1}}},{name:"platform.sampleValidators",content:"Sample validators from the specified Subnet.\n\n### Parameters\n\n- `size` is the number of validators to sample.\n- `subnetID` is the Subnet to sampled from. If omitted, defaults to the Primary Network.\n\n### Response\n\n- `validators` Each element of `validators` is the ID of a validator.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"platform.sampleValidators",params:{size:2}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.sampleValidators",status:"OK",code:200,body:{jsonrpc:"2.0",result:{validators:["NodeID-Le5rVEBBPdgYEcEJpvYeKo36hRs75WE5S","NodeID-PD54wi24ENhbBnKKhoD68MGXCDc3A3iA8"]},id:1}}},{name:"platform.validatedBy",content:"Get the Subnet that validates a given blockchain.\n\n### Parameters\n\n- `blockchainID` is the blockchain\u2019s ID.\n\n### Response\n\n- `subnetID` is the ID of the Subnet that validates the blockchain.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.validatedBy",params:{blockchainID:"2jRZvKtXY5nyWTqRwFh1KMHGrCRxJoULu4r2CsayWRnjdDGbV1"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.validatedBy",status:"OK",code:200,body:{jsonrpc:"2.0",result:{subnetID:"7f9jciLEX25NPJEaAz1X7XF44B1Q9UBwq6PdnCHm5mnUq1e1C"},id:1}}},{name:"platform.validates",content:"Get the IDs of the blockchains a Subnet validates.\n\n### Parameters\n\n- `subnetID` is the Subnet\u2019s ID.\n\n### Response\n\n- Each element of `blockchainIDs` is the ID of a blockchain the Subnet validates.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"platform.validates",params:{subnetID:"7f9jciLEX25NPJEaAz1X7XF44B1Q9UBwq6PdnCHm5mnUq1e1C"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/P"},interactive:!0,response:{name:"platform.validates",status:"OK",code:200,body:{jsonrpc:"2.0",result:{blockchainIDs:["2jRZvKtXY5nyWTqRwFh1KMHGrCRxJoULu4r2CsayWRnjdDGbV1"]},id:1}}}],service:"node-api",networks:[{label:"Arbitrum",value:"arbitrum"},{label:"Avalanche C-Chain",value:"avalanche-c-chain"},{label:"Avalanche P-Chain",value:"avalanche-p-chain"},{label:"Avalanche X-Chain",value:"avalanche-x-chain"},{label:"BNB",value:"bnb"},{label:"Celo",value:"celo"},{label:"Cosmos LCD",value:"cosmos-lcd"},{label:"Cosmos Tendermint RPC",value:"cosmos-tendermint-rpc"},{label:"Ethereum",value:"ethereum"},{label:"Fantom",value:"fantom"},{label:"Kusama Sidecar",value:"kusama-sidecar"},{label:"Mina GraphQL",value:"mina-graphql"},{label:"NEAR",value:"near"},{label:"Optimism",value:"optimism"},{label:"Osmosis LCD",value:"osmosis-lcd"},{label:"Osmosis Tendermint RPC",value:"osmosis-tendermint-rpc"},{label:"Polkadot Sidecar",value:"polkadot-sidecar"},{label:"Polygon",value:"polygon"},{label:"Solana",value:"solana"}],network:"avalanche-p-chain",proxy:"https://api-service-proxy.figment-secops.workers.dev",mdxType:"APIMethods"}))}p.isMDXComponent=!0},6700:(e,t,a)=>{var n={"./af":2786,"./af.js":2786,"./ar":867,"./ar-dz":4130,"./ar-dz.js":4130,"./ar-kw":6135,"./ar-kw.js":6135,"./ar-ly":6440,"./ar-ly.js":6440,"./ar-ma":7702,"./ar-ma.js":7702,"./ar-sa":6040,"./ar-sa.js":6040,"./ar-tn":7100,"./ar-tn.js":7100,"./ar.js":867,"./az":1083,"./az.js":1083,"./be":9808,"./be.js":9808,"./bg":8338,"./bg.js":8338,"./bm":7438,"./bm.js":7438,"./bn":8905,"./bn-bd":6225,"./bn-bd.js":6225,"./bn.js":8905,"./bo":1560,"./bo.js":1560,"./br":1278,"./br.js":1278,"./bs":622,"./bs.js":622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":877,"./cv.js":877,"./cy":7373,"./cy.js":7373,"./da":4780,"./da.js":4780,"./de":9740,"./de-at":217,"./de-at.js":217,"./de-ch":894,"./de-ch.js":894,"./de.js":9740,"./dv":5300,"./dv.js":5300,"./el":837,"./el.js":837,"./en-au":8348,"./en-au.js":8348,"./en-ca":7925,"./en-ca.js":7925,"./en-gb":2243,"./en-gb.js":2243,"./en-ie":6436,"./en-ie.js":6436,"./en-il":7207,"./en-il.js":7207,"./en-in":4175,"./en-in.js":4175,"./en-nz":6319,"./en-nz.js":6319,"./en-sg":1662,"./en-sg.js":1662,"./eo":2915,"./eo.js":2915,"./es":5655,"./es-do":5251,"./es-do.js":5251,"./es-mx":6112,"./es-mx.js":6112,"./es-us":1146,"./es-us.js":1146,"./es.js":5655,"./et":5603,"./et.js":5603,"./eu":7763,"./eu.js":7763,"./fa":6959,"./fa.js":6959,"./fi":1897,"./fi.js":1897,"./fil":2549,"./fil.js":2549,"./fo":4694,"./fo.js":4694,"./fr":4470,"./fr-ca":3049,"./fr-ca.js":3049,"./fr-ch":2330,"./fr-ch.js":2330,"./fr.js":4470,"./fy":5044,"./fy.js":5044,"./ga":9295,"./ga.js":9295,"./gd":2101,"./gd.js":2101,"./gl":8794,"./gl.js":8794,"./gom-deva":7884,"./gom-deva.js":7884,"./gom-latn":3168,"./gom-latn.js":3168,"./gu":5349,"./gu.js":5349,"./he":4206,"./he.js":4206,"./hi":94,"./hi.js":94,"./hr":316,"./hr.js":316,"./hu":2138,"./hu.js":2138,"./hy-am":1423,"./hy-am.js":1423,"./id":9218,"./id.js":9218,"./is":135,"./is.js":135,"./it":626,"./it-ch":150,"./it-ch.js":150,"./it.js":626,"./ja":9183,"./ja.js":9183,"./jv":4286,"./jv.js":4286,"./ka":2105,"./ka.js":2105,"./kk":7772,"./kk.js":7772,"./km":8758,"./km.js":8758,"./kn":9282,"./kn.js":9282,"./ko":3730,"./ko.js":3730,"./ku":1408,"./ku.js":1408,"./ky":3291,"./ky.js":3291,"./lb":6841,"./lb.js":6841,"./lo":5466,"./lo.js":5466,"./lt":7010,"./lt.js":7010,"./lv":7595,"./lv.js":7595,"./me":9861,"./me.js":9861,"./mi":5493,"./mi.js":5493,"./mk":5966,"./mk.js":5966,"./ml":7341,"./ml.js":7341,"./mn":5115,"./mn.js":5115,"./mr":370,"./mr.js":370,"./ms":9847,"./ms-my":1237,"./ms-my.js":1237,"./ms.js":9847,"./mt":2126,"./mt.js":2126,"./my":6165,"./my.js":6165,"./nb":4924,"./nb.js":4924,"./ne":6744,"./ne.js":6744,"./nl":3901,"./nl-be":9814,"./nl-be.js":9814,"./nl.js":3901,"./nn":3877,"./nn.js":3877,"./oc-lnc":2135,"./oc-lnc.js":2135,"./pa-in":5858,"./pa-in.js":5858,"./pl":4495,"./pl.js":4495,"./pt":9520,"./pt-br":7971,"./pt-br.js":7971,"./pt.js":9520,"./ro":6459,"./ro.js":6459,"./ru":1793,"./ru.js":1793,"./sd":950,"./sd.js":950,"./se":490,"./se.js":490,"./si":124,"./si.js":124,"./sk":4249,"./sk.js":4249,"./sl":4985,"./sl.js":4985,"./sq":1104,"./sq.js":1104,"./sr":9131,"./sr-cyrl":9915,"./sr-cyrl.js":9915,"./sr.js":9131,"./ss":5893,"./ss.js":5893,"./sv":8760,"./sv.js":8760,"./sw":1172,"./sw.js":1172,"./ta":7333,"./ta.js":7333,"./te":3110,"./te.js":3110,"./tet":2095,"./tet.js":2095,"./tg":7321,"./tg.js":7321,"./th":9041,"./th.js":9041,"./tk":9005,"./tk.js":9005,"./tl-ph":5768,"./tl-ph.js":5768,"./tlh":9444,"./tlh.js":9444,"./tr":2397,"./tr.js":2397,"./tzl":8254,"./tzl.js":8254,"./tzm":1106,"./tzm-latn":699,"./tzm-latn.js":699,"./tzm.js":1106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":7691,"./uk.js":7691,"./ur":3795,"./ur.js":3795,"./uz":6791,"./uz-latn":588,"./uz-latn.js":588,"./uz.js":6791,"./vi":5666,"./vi.js":5666,"./x-pseudo":4378,"./x-pseudo.js":4378,"./yo":5805,"./yo.js":5805,"./zh-cn":3839,"./zh-cn.js":3839,"./zh-hk":5726,"./zh-hk.js":5726,"./zh-mo":9807,"./zh-mo.js":9807,"./zh-tw":4152,"./zh-tw.js":4152};function s(e){var t=r(e);return a(t)}function r(e){if(!a.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}s.keys=function(){return Object.keys(n)},s.resolve=r,e.exports=s,s.id=6700}}]);