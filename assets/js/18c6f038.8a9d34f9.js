"use strict";(self.webpackChunkfigment_documentation=self.webpackChunkfigment_documentation||[]).push([[3782],{2750:(e,t,n)=>{n.d(t,{ZP:()=>l});var i=n(7462),a=(n(7294),n(3905)),s=n(5488),r=n(5162),o=n(7643);const d={toc:[{value:"Authentication",id:"authentication",level:3}]};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"authentication"},"Authentication"),(0,a.kt)("div",null,"API calls require authentication with API key via ",(0,a.kt)("code",null,"Authorization")," ","request header or ",(0,a.kt)("code",null,"URL")," property. Calls are made to the"," ",(0,a.kt)("strong",null,n.network," ",n.service)," ","endpoint, hosted at ",(0,a.kt)("code",null,n.url),(0,a.kt)("br",null),(0,a.kt)("br",null)),"Here's some boilerplate to get you started."," ",(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"js-header",label:"Fetch with Header",mdxType:"TabItem"},(0,a.kt)(o.Z,{language:"js",mdxType:"CodeBlock"},`fetch("${n.url}", {\n    method: 'POST', // can also be 'GET', 'PUT' or any appropriate method\n    headers: {\n        "Authorization" : "<api_key>",\n        "Content-Type": "application/json" // if method is 'POST'\n    },\n    body: JSON.stringify({\n      // JSON Payload\n    })\n})`)),(0,a.kt)(r.Z,{value:"js-parameter",label:"Fetch with Parameter",mdxType:"TabItem"},(0,a.kt)(o.Z,{language:"js",mdxType:"CodeBlock"},`fetch("${n.url}", {\n    method: 'POST', // can also be 'GET', 'PUT' or any appropriate method\n    headers: {\n        "Content-Type": "application/json" // if method is 'POST'\n    },\n    body: JSON.stringify({\n      // JSON Payload\n    })\n})`)),(0,a.kt)(r.Z,{value:"curl-header",label:"CURL with Header",mdxType:"TabItem"},(0,a.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},`curl -X POST '${n.url}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: <api_key>' \\\n--data '{\n  // JSON Payload\n}'`)),(0,a.kt)(r.Z,{value:"curl-parameter",label:"CURL with Parameter",mdxType:"TabItem"},(0,a.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},`curl -X POST '${n.url}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  // JSON Payload\n}'`))))}l.isMDXComponent=!0},3976:(e,t,n)=>{n.d(t,{Z:()=>s});var i=n(7294),a=n(6550);function s(e){let{network:t,networks:n,methods:s,service:r}=e;const o=(0,a.TH)(),d=(0,a.k6)();return i.createElement("div",null,i.createElement("label",null,"Change Network: "),i.createElement("select",{className:"custom-select",defaultValue:t,onChange:e=>{d.push(o.pathname.replace(/\/[^\/]+$/,`/${e.target.value}`))}},n.map((e=>i.createElement("option",{key:`${e.value}--n-option`,value:e.value},e.label)))),i.createElement("label",null," Jump to: "),i.createElement("select",{className:"custom-select",defaultValue:o.hash.replace("#","")||"",onChange:e=>{d.push(`#${e.target.value}`)}},s.map((e=>i.createElement("option",{key:`${e.name}--m-hash`,value:e.name.toLowerCase()},e.name)))))}},7297:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(7294);function a(e){let{network:t,service:n}=e;return(0,i.useEffect)((()=>{const e=document.querySelector(".breadcrumbs__item.breadcrumbs__item--active");if(!e)return;e.querySelector("span.breadcrumbs__link").innerHTML=t;let i=e.previousElementSibling;i=i.cloneNode(!0),i.querySelector(".breadcrumbs__link span").innerHTML=n.label,i.querySelector(".breadcrumbs__link").href=n.link,e.insertAdjacentElement("beforebegin",i)}),[t]),i.createElement(i.Fragment,null)}},3213:(e,t,n)=>{n.d(t,{S:()=>R});var i=n(7462),a=n(7294),s=n(8538),r=n(7748),o=n(460),d=n.n(o),l=n(3746),u=n(6412);const p={Header:"Header_JfB9",blinker:"blinker_fwXa",Actions:"Actions_tjtQ",Container:"Container_SXTI",Editor:"Editor_gTle",Line:"Line_F8ZC",Code:"Code_xj0a"};function c(e){let{children:t="",header:n,actions:s,disabled:r=!1,status:o,onValueChange:c}=e;const m=(0,u.p)(),h=(0,a.useRef)(null);(0,a.useEffect)((()=>{var e;const t=null==(e=h.current)?void 0:e.querySelector("textarea"),n=e=>{const t=e.target;t.style.width=t.scrollWidth+"px"};return t.addEventListener("input",n),()=>t.removeEventListener("input",n)}),[]);return a.createElement("div",{ref:h},a.createElement(g,{actions:s,status:o},n),a.createElement("div",{className:p.Container},a.createElement(d(),{value:t,onValueChange:c,highlight:function(e){return void 0===e&&(e=""),a.createElement(l.ZP,(0,i.Z)({},l.lG,{theme:m,code:e,language:"json"}),(e=>{let{className:t,style:n,tokens:s,getLineProps:r,getTokenProps:o}=e;return a.createElement("div",{className:p.Code},s.map(((e,t)=>a.createElement("div",(0,i.Z)({key:t},r({line:e,key:t}),{className:p.Line}),a.createElement("span",{className:p.LineContent},e.map(((e,t)=>a.createElement("span",(0,i.Z)({key:t},o({token:e,key:t}))))))))))}))},disabled:r,ignoreTabKey:!0,padding:10,style:{...m.plain,overflow:"auto"},className:p.Editor})))}function g(e){let{children:t,actions:n=[],status:i}=e;return a.createElement("div",{className:p.Header,"data-status":i},a.createElement("span",null,t),a.createElement("span",{className:p.Actions},n.map(((e,t)=>{let{title:n,onClick:i,Component:s=n}=e;return a.createElement("button",{className:p.HeaderButton,key:`${t}:${n}`,title:n,onClick:i},s)}))))}var m=n(195);const h="overlayHeaderButton_IGf5";const _=function(e,t){const n=(0,a.useRef)(!1),i={error:void 0,data:void 0,loading:!1},[s,r]=(0,a.useReducer)(((e,t)=>{switch(t.type){case"loading":return{...i,loading:!0};case"fetched":return{...i,data:t.payload,loading:!1};case"error":return{...i,error:t.payload,loading:!1};default:return e}}),i);return{...s,fetchData:async function(i,a){void 0===a&&(a={}),r({type:"loading"});try{const s=await fetch(e+(i?`/${i}`:""),{...t,...a});if(!s.ok){let e,t,n;try{n=JSON.parse(await s.text()),e=await s.json(),t=JSON.stringify(e,null,2)}catch{}throw new Error(JSON.stringify(t,null,2)||JSON.stringify(n,null,2)||s.statusText)}const o=await s.json();if(n.current)return;return r({type:"fetched",payload:o}),o}catch(s){if(n.current)return;return r({type:"error",payload:s.message}),null}}}};var y,b=n(7643),f=n(4672);function v(){return v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},v.apply(this,arguments)}const k=e=>{let{title:t,titleId:n,...i}=e;return a.createElement("svg",v({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},i),t?a.createElement("title",{id:n},t):null,y||(y=a.createElement("path",{d:"m10 16.5 6-4.5-6-4.5v9ZM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2Zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8Z",fill:"#0C3F5C"})))};var w;function A(){return A=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},A.apply(this,arguments)}const E=e=>{let{title:t,titleId:n,...i}=e;return a.createElement("svg",A({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},i),t?a.createElement("title",{id:n},t):null,w||(w=a.createElement("path",{d:"M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35Z",fill:"#0C3F5C"})))};function T(e){let{req:t,res:n,interactive:i,endpoint:s}=e;const[r,o]=(0,a.useState)(C(t.body)),[d,l]=(0,a.useState)(t.query),[u,p]=(0,a.useState)(P(n.body)),g="string"==typeof t.body&&0==t.body.indexOf("query"),{data:y,error:v,loading:w,fetchData:A}=_(s,{method:t.method,headers:{...t.headers,"Content-Type":g?"application/graphql":"application/json"},body:C(t.body)}),[T,x]=(0,a.useState)(null);(0,a.useEffect)((()=>{w?x("LOADING"):v||null!=y&&y.error?x("ERROR"):y&&x("SUCCESS")}),[y,v,w]);const j=[i?{title:"Run request",onClick:async()=>{const e=await A(d,{body:r});e&&p(P(e))},Component:a.createElement(a.Fragment,null,a.createElement(k,null)," Run")}:null,{title:"Copy",onClick:()=>(0,m.Z)(r),Component:a.createElement(f.Z,{code:"",className:h})},i?{title:"Reset",onClick:()=>{x(null),l(t.query),o(C(t.body)),p(P(n.body))},Component:a.createElement(E,null)}:null].filter((e=>!!e));return a.createElement(a.Fragment,null,a.createElement(c,{header:"GET"===t.method?"Request Query "+(i?"(try it)":""):"Request Body "+(i?"(try it)":""),actions:j,disabled:!i,onValueChange:e=>{i&&("GET"===t.method?l(e):"POST"===t.method&&o(e))}},"GET"===t.method?d:r),a.createElement(b.Z,{title:T?"Response":"Example Response",language:"json"},v?`${v}`:u))}function P(e){return JSON.stringify(e,null,2)}function C(e){return"string"==typeof e?e:JSON.stringify(e,null,2)}const x="heading_REER";var j=n(9960),q=n(3905);const S={toc:[]};function O(e){let{components:t,...n}=e;return(0,q.kt)("wrapper",(0,i.Z)({},S,n,{components:t,mdxType:"MDXLayout"}),(0,q.kt)("details",{open:n.accordionOpen?"open":void 0},(0,q.kt)("summary",null,(0,q.kt)("span",{className:"open"},"Specification"),(0,q.kt)("span",{className:"closed"},"View Specification")),(0,q.kt)(s.D,{mdxType:"ReactMarkdown"},n.details)))}function I(e){let{name:t,content:n="",interactive:i,request:r,accordionOpen:o=!1,response:d,endpoint:l}=e;["Rewards (by epoch)","Rewards (daily)"].includes(t)&&(r.body={...r.body,start_time:new Date(Date.now()-("Rewards (by epoch)"===t?1728e5:864e5)).toISOString().split("T")[0],end_time:(new Date).toISOString().split("T")[0]});const[u,...p]=n.trim().split(/\n+/),c=p.join("\n");return a.createElement(a.Fragment,null,a.createElement("h2",{id:t.toLowerCase(),className:x,"data-method":r.method},a.createElement(j.Z,{to:`#${t.toLowerCase()}`},t)),a.createElement(s.D,null,u),a.createElement(T,{req:r,res:d,interactive:i,endpoint:l}),a.createElement(O,{details:c,accordionOpen:o}),a.createElement("hr",null))}function R(e){let{network:t,methods:n,service:s,proxy:o}=e;return a.createElement(a.Fragment,null,a.createElement("h3",null,"Available Methods"),n.map(((e,n)=>a.createElement(I,(0,i.Z)({key:t+n},e,{endpoint:`${o}/${s}/${t}`,accordionOpen:"node-api"!==s})))),a.createElement(r.Z,null))}O.isMDXComponent=!0},9562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>g});var i=n(7462),a=(n(7294),n(3905)),s=n(3213),r=n(3976),o=n(7297),d=n(2750);const l={title:"Ethereum",sidebar_position:0,pagination_prev:null,pagination_next:null,collapsed:!0,collapsible:!0,description:"Prime API - Ethereum",image:"img/logo.svg",keywords:["Prime API","Ethereum"]},u="Prime API - Ethereum",p={unversionedId:"api-reference/prime-api/ethereum",id:"api-reference/prime-api/ethereum",title:"Ethereum",description:"Prime API - Ethereum",source:"@site/docs/api-reference/prime-api/ethereum.mdx",sourceDirName:"api-reference/prime-api",slug:"/api-reference/prime-api/ethereum",permalink:"/api-reference/prime-api/ethereum",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Ethereum",sidebar_position:0,pagination_prev:null,pagination_next:null,collapsed:!0,collapsible:!0,description:"Prime API - Ethereum",image:"img/logo.svg",keywords:["Prime API","Ethereum"]},sidebar:"docsSidebar"},c={},g=[],m={toc:g};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prime-api---ethereum"},"Prime API - Ethereum"),(0,a.kt)(o.Z,{network:"Ethereum",service:{link:"/api-reference/prime-api",label:"Prime API"},mdxType:"FixBreadCrumbs"}),(0,a.kt)(r.Z,{service:"prime-api",methods:[{name:"/eth2_staking/positions"},{name:"/eth2_staking/positions"},{name:"/eth2_staking/positions/{position_id}/validators"},{name:"/eth2_staking/validators"},{name:"/eth2_staking/validators/{id}"}],networks:[{label:"Ethereum",value:"ethereum"},{label:"Polkadot",value:"polkadot"}],network:"ethereum",mdxType:"ApiReferenceNav"}),(0,a.kt)(d.ZP,{url:"https://hubble.figment.io/api/v1/prime",network:"Ethereum",service:"Prime API",mdxType:"MakingCalls"}),(0,a.kt)(s.S,{methods:[{name:"/eth2_staking/positions",content:'Request creation of new staking position with the passed attributes.\n\n### Parameters\n\n- `external_user_id` \u2014 `string` \u2014 A customer user ID.\n- `external_user_email` \u2014 `string` \u2014 A customer email address.\n- `withdrawal_address` \u2014 `string` \u2014 An Ethereum address.\n- `validators_count` \u2014 `integer` \u2014 A number of validators.\n- `eth2_network_name` \u2014 `string` \u2014 A network name, denoting testnet (`goerli`) or mainnet (`prater`).\n    \n\n### Response\n\n- `success` \u2014 `boolean` \u2014 Returns `true` if the action was successful, otherwise returns `false`.\n    \n\n### Webhook configuration\n\nUsers can be notified via webhook when a new staking position is created. Configure a webhook URL and a webhook API key under "Prime / ETH Staking" in the Prime Dashboard. The configured API key will be sent as an `Authorization` header.',request:{method:"POST",header:[],body:{external_user_id:"user_id",external_user_email:"user@company.com",withdrawal_address:"0x01000000000000000000000003777debd25dcdbc4cdb56178906ac0ecac94019",validators_count:1,eth2_network_name:"goerli"},url:"https://hubble.figment.io/api/v1/prime",headers:{},query:"eth2_staking/positions/"},interactive:!1,response:{name:"/api/v1/prime/eth2_staking/positions",body:{success:!0}}},{name:"/eth2_staking/positions",content:"Returns a list of staking positions.\n\n### Parameters\n\n- `withdrawal_address` \u2014 `string` \u2014 A withdrawal address (required)\n- `page[size]` \u2014 `integer` \u2014 The number of results to display, used for pagination (optional).\n- `page[number]` \u2014 `integer` \u2014 The number of pages to display (optional).\n- `fundable_positions_only` \u2014 `boolean` \u2014 `true` will display only positions which can be funded (optional).\n    \n\n### Response\n\n- `data` - `array`\n    - `object` \u2014 Each response object contains the following fields:\n        - `id` \u2014 A unique identifier.\n        - `type` \u2014 The type of staking position.\n        - `attributes`\n            - `id` \u2014 A unique identifier.\n            - `name` \u2014 A name.\n            - `eth1_withdrawal_address` \u2014 An Ethereum address.\n            - `staked_amount` \u2014 The amount of staked ETH.\n            - `validators_count` \u2014 A number of validators.\n            - `created_at` \u2014 Timestamp.\n            - `updated_at` \u2014 Timestamp.\n        - `links` \u2014 `object` \u2014 Pagination links based on `page[size]` and `page[number]`.",request:{method:"GET",header:[],url:"https://hubble.figment.io",headers:{},query:"api/v1/prime/eth2_staking/positions?withdrawal_address=0x542138451d0953Aa082dE659d2A1ca1e5EF452Bf&page[size]=10&page[number]=1&fundable_positions_only=false"},interactive:!1,response:{name:"/api/v1/prime/eth2_staking/positions",body:{data:[{id:"string",type:"string",attributes:{id:0,name:"string",eth1_withdrawal_address:"string",staked_amount:0,validators_count:0,created_at:"string",updated_at:"string"}}],links:{self:"string",current:"string",next:"string",last:"string",prev:"string"}}}},{name:"/eth2_staking/positions/{position_id}/validators",content:"Returns a list of validators for a given staking position.\n\n### Parameters\n\n- `position_id` \u2014 `string` \u2014 A valid staking position ID (required).\n- `include` \u2014 `string` \u2014 Accepted value: `position`\n- `status_history` - `string` \u2014 If present, status change history will be included for each validator.\n- `status` - `string` \u2014 Accepted value(s): `funding_requested`, `deposited`, `pending_initialized`, `pending_queued`, `active_ongoing`, `active_exiting`, `active_slashed`, `exited_unslashed`, `exited_slashed`, `withdrawal_possible`, `withdrawal_done`, `provisioned`.\n- `page[size]` \u2014 `integer` \u2014 The number of results to display, used for pagination (optional).\n- `page[number]` \u2014 `integer` \u2014 The page to display (optional).\n    \n\n### Response\n\n- `data` - `array`\n    - `object`\n        - `id` \u2014 `string` - A unique identifier.\n        - `type` \u2014 `string` \u2014 The type of position.\n        - `attributes` \u2014 `object`\n            - `name` \u2014 `string` \u2014 The position name.\n            - `pubkey` \u2014 `string` \u2014 A public key.\n            - `withdrawal_credentials` \u2014 `string` \u2014 Valid withdrawal credentials.\n            - `amount` \u2014 `integer` \u2014 An amount of ETH.\n            - `signature` \u2014 `string` \u2014 A valid signature.\n            - `deposit_data_root` \u2014 `string` \u2014 The deposit data.\n            - `deposit_message_root` \u2014 `string` \u2014 The deposit message.\n            - `fork_version` \u2014 `string` \u2014 A fork version.\n            - `eth2_network_name` \u2014 `string` \u2014 A network name, denoting testnet (`goerli`) or mainnet (`prater`).\n            - `status` - `string` \u2014 The positions current status.\n            - `deposit_cli_version` \u2014 `string` \u2014 The version of the CLI software used when making the deposit.\n            - `status_synced_at` \u2014 `string` \u2014 A timestamp indicating when the status was last synced,\n            - `status_history` \u2014 `array` \u2014 Details of the status history.\n                - `status` \u2014 `string` \u2014 A status.\n                - `changed_at` \u2014 `string` \u2014 A timestamp.\n        - `relationships` \u2014 `object`\n            - `position` \u2014 `object`\n                - `data` \u2014 `object`\n                    - `id` \u2014 `string` \u2014 A unique identifier.\n                    - `type` \u2014 `string` \u2014 The position type.\n        - `links` \u2014 `object` \u2014 Pagination links based on `page[size]` and `page[number]`.\n            - `self` \u2014 `string`\n            - `current` \u2014 `string`\n            - `next` \u2014 `string`\n            - `last` \u2014 `string`\n            - `prev` \u2014 `string`\n        - `included` \u2014 `array`\n            - `object`\n                - `id` \u2014 `string` \u2014 A unique identifier.\n                - `type` \u2014 `string` \u2014 The position type.\n                - `attributes` \u2014 `object`\n                    - `id` \u2014 `string` \u2014 A unique identifier.\n                    - `name` \u2014 `string` \u2014 A name.\n                    - `eth1_withdrawal_address` \u2014 `string` \u2014 An Ethereum address.\n                    - `staked_amount` \u2014 `integer` \u2014 An amount of staked ETH.\n                    - `validators_count` \u2014 `integer -` A number of validators.\n                    - `created_at` \u2014 `string` \u2014 A timestamp.\n                    - `updated_at` \u2014 `string` \u2014 A timestamp.",request:{method:"GET",header:[],url:"https://hubble.figment.io",headers:{},query:"api/v1/prime/eth2_staking/positions/{{position_id}}/validators?page[size]=10&page[number]=1&include=position&status_history=true&status=provisioned&position_id=123456"},interactive:!1,response:{name:"/api/v1/prime/eth2_staking/positions/{position_id}/validators",body:{data:[{id:"string",type:"string",attributes:{name:"string",pubkey:"string",withdrawal_credentials:"string",amount:0,signature:"string",deposit_data_root:"string",deposit_message_root:"string",fork_version:"string",eth2_network_name:"string",status:"string",deposit_cli_version:"string",status_synced_at:"string",status_history:[{status:"string",changed_at:"string"}]},relationships:{position:{data:{id:"string",type:"string"}}}}],links:{self:"string",current:"string",next:"string",last:"string",prev:"string"},included:[{id:"string",type:"string",attributes:{id:0,name:"string",eth1_withdrawal_address:"string",staked_amount:0,validators_count:0,created_at:"string",updated_at:"string"}}]}}},{name:"/eth2_staking/validators",content:"Returns a list of validators belonging to a customer.\n\n### Parameters\n\n- `withdrawal_address` \u2014 `string` \u2014 An Ethereum address.\n- `page[size]` \u2014 `integer` \u2014 The number of results to display, used for pagination (optional).\n- `page[number]` \u2014 `integer` \u2014 The page number to display (optional).\n- `include` \u2014 `string` \u2014 Accepts the value `position`.\n- `status_history` \u2014 `string` \u2014 If present, status change history will be included for each validator.\n- `status` \u2014 `string` \u2014 Accepted value(s): `funding_requested`, `deposited`, `pending_initialized`, `pending_queued`, `active_ongoing`, `active_exiting`, `active_slashed`, `exited_unslashed`, `exited_slashed`, `withdrawal_possible`, `withdrawal_done`, `provisioned`.\n    \n\n### Response\n\n- `data` \u2014 `array`\n    - `object`\n        - `id` \u2014 `string` \u2014 A unique identifier.\n        - `type` \u2014 `string` \u2014 The type of position.\n        - `attributes` \u2014 `object`\n            - `name` \u2014 `string` \u2014 The position name.\n            - `pubkey` \u2014 `string` \u2014 A public key.\n            - `withdrawal_credentials` \u2014 `string` \u2014 Valid withdrawal credentials.\n            - `amount` \u2014 `integer` \u2014 An amount of ETH.\n            - `signature` \u2014 `string` \u2014 A valid signature.\n            - `deposit_data_root` \u2014 `string` \u2014 The deposit data.\n            - `deposit_message_root` \u2014 `string` \u2014 The deposit message.\n            - `fork_version` \u2014 `string` \u2014 A fork version.\n            - `eth2_network_name` \u2014 `string` \u2014 A network name, denoting testnet (`goerli`) or mainnet (`prater`).\n            - `status` \u2014 `string` \u2014 The positions current status.\n            - `deposit_cli_version` \u2014 `string` \u2014 The version of the CLI software used when making the deposit.\n            - `status_synced_at` \u2014 `string` \u2014 A timestamp indicating when the status was last synced,\n            - `status_history` \u2014 `array` \u2014 Details of the status history.\n                - `status` \u2014 `string` \u2014 A status.\n                - `changed_at` \u2014 `string` \u2014 A timestamp.\n        - `relationships` \u2014 `object`\n            - `position` \u2014 `object`\n                - `data` \u2014 `object`\n                    - `id` \u2014 `string` \u2014 A unique identifier.\n                    - `type` \u2014 `string` \u2014 The position type.\n        - `links` \u2014 `object` \u2014 Pagination links based on `page[size]` and `page[number]`.\n            - `self` \u2014 `string`\n            - `current` \u2014 `string`\n            - `next` \u2014 `string`\n            - `last` \u2014 `string`\n            - `prev` \u2014 `string`\n        - `included` \u2014 `array`\n            - `object`\n                - `id` \u2014 `string` \u2014 A unique identifier.\n                - `type` \u2014 `string` \u2014 The position type.\n                - `attributes` \u2014 `object`\n                    - `id` \u2014 `string` \u2014 A unique identifier.\n                    - `name` \u2014 `string` \u2014 A name.\n                    - `eth1_withdrawal_address` \u2014 `string` \u2014 An Ethereum address.\n                    - `staked_amount` \u2014 `integer` \u2014 An amount of staked ETH.\n                    - `validators_count` \u2014 `integer` \u2014 A number of validators.\n                    - `created_at` \u2014 `string` \u2014 A timestamp.\n                    - `updated_at` \u2014 `string` \u2014 A timestamp.",request:{method:"GET",header:[],url:"https://hubble.figment.io",headers:{},query:"api/v1/prime/eth2_staking/validators?withdrawal_address=0x542138451d0953Aa082dE659d2A1ca1e5EF452Bf&page[size]=10&page[number]=1&include=position&status_history=true&status=provisioned"},interactive:!1,response:{name:"/api/v1/prime/eth2_staking/validators",body:{data:[{id:"string",type:"string",attributes:{name:"string",pubkey:"string",withdrawal_credentials:"string",amount:0,signature:"string",deposit_data_root:"string",deposit_message_root:"string",fork_version:"string",eth2_network_name:"string",status:"string",deposit_cli_version:"string",status_synced_at:"string",status_history:[{status:"string",changed_at:"string"}]},relationships:{position:{data:{id:"string",type:"string"}}}}],links:{self:"string",current:"string",next:"string",last:"string",prev:"string"},included:[{id:"string",type:"string",attributes:{id:0,name:"string",eth1_withdrawal_address:"string",staked_amount:0,validators_count:0,created_at:"string",updated_at:"string"}}]}}},{name:"/eth2_staking/validators/{id}",content:"Returns information about a single validator.\n\n### Parameters\n\n- `id` \u2014 `string` \u2014 The validator ID.\n- `include` \u2014 `string` \u2014 Accepts the value `position`.\n- `status_history` \u2014 `string` \u2014 If present, the status change history will be included for each validator.\n    \n\n### Response\n\n- `data` \u2014 `array`\n    - `object`\n        - `id` \u2014 `string` - A unique identifier.\n        - `type` \u2014 `string` - The type of position.\n        - `attributes` \u2014 `object`\n            - `name` \u2014 `string` \u2014 The position name.\n            - `pubkey` \u2014 `string` \u2014 A public key.\n            - `withdrawal_credentials` \u2014 `string` \u2014 Valid withdrawal credentials.\n            - `amount` \u2014 `integer` \u2014 An amount of ETH.\n            - `signature` \u2014 `string` \u2014 A valid signature.\n            - `deposit_data_root` \u2014 `string` \u2014 The deposit data.\n            - `deposit_message_root` \u2014 `string` \u2014 The deposit message.\n            - `fork_version` \u2014 `string` \u2014 A fork version.\n            - `eth2_network_name` \u2014 `string` \u2014 A network name, denoting testnet (`goerli`) or mainnet (`prater`).\n            - `status` \u2014 `string` \u2014 The positions current status.\n            - `deposit_cli_version` \u2014 `string` \u2014 The version of the CLI software used when making the deposit.\n            - `status_synced_at` \u2014 `string` \u2014 A timestamp indicating when the status was last synced,\n            - `status_history` \u2014 `array` \u2014 Details of the status history.\n                - `status` \u2014 `string` \u2014 A status.\n                - `changed_at` \u2014 `string` \u2014 A timestamp.\n        - `relationships` \u2014 `object`\n            - `position` \u2014 `object`\n                - `data` \u2014 `object`\n                    - `id` \u2014 `string` \u2014 A unique identifier.\n                    - `type` \u2014 `string` \u2014 The position type.\n        - `included` \u2014 `array`\n            - `object`\n                - `id` \u2014 `string` \u2014 A unique identifier.\n                - `type` \u2014 `string` \u2014 The position type.\n                - `attributes` \u2014 `object`\n                    - `id` \u2014 `string` \u2014 A unique identifier.\n                    - `name` \u2014 `string` \u2014 A name.\n                    - `eth1_withdrawal_address` \u2014 `string` \u2014 An Ethereum address.\n                    - `staked_amount` \u2014 `integer` \u2014 An amount of staked ETH.\n                    - `validators_count` \u2014 `integer` \u2014 A number of validators.\n                    - `created_at` \u2014 `string` \u2014 A timestamp.\n                    - `updated_at` \u2014 `string` \u2014 A timestamp.",request:{method:"GET",header:[],url:"https://hubble.figment.io",headers:{},query:"api/v1/prime/eth2_staking/validators/?id=1234&include=position&status_history=true"},interactive:!1,response:{name:"/api/v1/prime/eth2_staking/validators/{id}",body:{data:{id:"string",type:"string",attributes:{name:"string",pubkey:"string",withdrawal_credentials:"string",amount:0,signature:"string",deposit_data_root:"string",deposit_message_root:"string",fork_version:"string",eth2_network_name:"string",status:"string",deposit_cli_version:"string",status_synced_at:"string",status_history:[{status:"string",changed_at:"string"}]},relationships:{position:{data:{id:"string",type:"string"}}}},included:[{id:"string",type:"string",attributes:{id:0,name:"string",eth1_withdrawal_address:"string",staked_amount:0,validators_count:0,created_at:"string",updated_at:"string"}}]}}}],service:"prime-api",networks:[{label:"Ethereum",value:"ethereum"},{label:"Polkadot",value:"polkadot"}],network:"ethereum",proxy:"https://api-service-proxy.paulpomerleau.workers.dev",mdxType:"APIMethods"}))}h.isMDXComponent=!0}}]);