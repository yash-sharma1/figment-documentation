"use strict";(self.webpackChunkfigment_documentation=self.webpackChunkfigment_documentation||[]).push([[7452],{2750:(e,a,t)=>{t.d(a,{ZP:()=>l});var n=t(7462),s=(t(7294),t(3905)),r=t(5488),o=t(5162),i=t(7643);const d={toc:[{value:"Authentication",id:"authentication",level:3}]};function l(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"authentication"},"Authentication"),(0,s.kt)("div",null,"API calls require authentication with API key via ",(0,s.kt)("code",null,"Authorization")," ","request header or ",(0,s.kt)("code",null,"URL")," property. Calls are made to the"," ",(0,s.kt)("strong",null,t.network," ",t.service)," ","endpoint, hosted at ",(0,s.kt)("code",null,t.url),(0,s.kt)("br",null),(0,s.kt)("br",null)),"Here's some boilerplate to get you started."," ",(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"js-header",label:"Fetch with Header",mdxType:"TabItem"},(0,s.kt)(i.Z,{language:"js",mdxType:"CodeBlock"},`fetch("${t.url}", {\n    method: 'POST', // can also be 'GET', 'PUT' or any appropriate method\n    headers: {\n        "Authorization" : "<api_key>",\n        "Content-Type": "application/json" // if method is 'POST'\n    },\n    body: JSON.stringify({\n      // JSON Payload\n    })\n})`)),(0,s.kt)(o.Z,{value:"js-parameter",label:"Fetch with Parameter",mdxType:"TabItem"},(0,s.kt)(i.Z,{language:"js",mdxType:"CodeBlock"},`fetch("${t.url}", {\n    method: 'POST', // can also be 'GET', 'PUT' or any appropriate method\n    headers: {\n        "Content-Type": "application/json" // if method is 'POST'\n    },\n    body: JSON.stringify({\n      // JSON Payload\n    })\n})`)),(0,s.kt)(o.Z,{value:"curl-header",label:"CURL with Header",mdxType:"TabItem"},(0,s.kt)(i.Z,{language:"bash",mdxType:"CodeBlock"},`curl -X POST '${t.url}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: <api_key>' \\\n--data '{\n  // JSON Payload\n}'`)),(0,s.kt)(o.Z,{value:"curl-parameter",label:"CURL with Parameter",mdxType:"TabItem"},(0,s.kt)(i.Z,{language:"bash",mdxType:"CodeBlock"},`curl -X POST '${t.url}' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  // JSON Payload\n}'`))))}l.isMDXComponent=!0},3976:(e,a,t)=>{t.d(a,{Z:()=>r});var n=t(7294),s=t(6550);function r(e){let{network:a,networks:t,methods:r,service:o}=e;const i=(0,s.TH)(),d=(0,s.k6)();return n.createElement("div",null,n.createElement("label",null,"Change Network: "),n.createElement("select",{className:"custom-select",defaultValue:a,onChange:e=>{d.push(i.pathname.replace(/\/[^\/]+$/,`/${e.target.value}`))}},t.map((e=>n.createElement("option",{key:`${e.value}--n-option`,value:e.value},e.label)))),n.createElement("label",null," Jump to: "),n.createElement("select",{className:"custom-select",defaultValue:i.hash.replace("#","")||"",onChange:e=>{d.push(`#${e.target.value}`)}},r.map((e=>n.createElement("option",{key:`${e.name}--m-hash`,value:e.name.toLowerCase()},e.name)))))}},7297:(e,a,t)=>{t.d(a,{Z:()=>s});var n=t(7294);function s(e){let{network:a,service:t}=e;return(0,n.useEffect)((()=>{const e=document.querySelector(".breadcrumbs__item.breadcrumbs__item--active");if(!e)return;e.querySelector("span.breadcrumbs__link").innerHTML=a;let n=e.previousElementSibling;n=n.cloneNode(!0),n.querySelector(".breadcrumbs__link span").innerHTML=t.label,n.querySelector(".breadcrumbs__link").href=t.link,e.insertAdjacentElement("beforebegin",n)}),[a]),n.createElement(n.Fragment,null)}},3213:(e,a,t)=>{t.d(a,{S:()=>z});var n=t(7462),s=t(7294),r=t(8538),o=t(7748),i=t(460),d=t.n(i),l=t(3746),h=t(6412);const c={Header:"Header_JfB9",blinker:"blinker_fwXa",Actions:"Actions_tjtQ",Container:"Container_SXTI",Editor:"Editor_gTle",Line:"Line_F8ZC",Code:"Code_xj0a"};function m(e){let{children:a="",header:t,actions:r,disabled:o=!1,status:i,onValueChange:m}=e;const p=(0,h.p)(),f=(0,s.useRef)(null);(0,s.useEffect)((()=>{var e;const a=null==(e=f.current)?void 0:e.querySelector("textarea"),t=e=>{const a=e.target;a.style.width=a.scrollWidth+"px"};return a.addEventListener("input",t),()=>a.removeEventListener("input",t)}),[]);return s.createElement("div",{ref:f},s.createElement(u,{actions:r,status:i},t),s.createElement("div",{className:c.Container},s.createElement(d(),{value:a,onValueChange:m,highlight:function(e){return void 0===e&&(e=""),s.createElement(l.ZP,(0,n.Z)({},l.lG,{theme:p,code:e,language:"json"}),(e=>{let{className:a,style:t,tokens:r,getLineProps:o,getTokenProps:i}=e;return s.createElement("div",{className:c.Code},r.map(((e,a)=>s.createElement("div",(0,n.Z)({key:a},o({line:e,key:a}),{className:c.Line}),s.createElement("span",{className:c.LineContent},e.map(((e,a)=>s.createElement("span",(0,n.Z)({key:a},i({token:e,key:a}))))))))))}))},disabled:o,ignoreTabKey:!0,padding:10,style:{...p.plain,overflow:"auto"},className:c.Editor})))}function u(e){let{children:a,actions:t=[],status:n}=e;return s.createElement("div",{className:c.Header,"data-status":n},s.createElement("span",null,a),s.createElement("span",{className:c.Actions},t.map(((e,a)=>{let{title:t,onClick:n,Component:r=t}=e;return s.createElement("button",{className:c.HeaderButton,key:`${a}:${t}`,title:t,onClick:n},r)}))))}var p=t(195);const f="overlayHeaderButton_IGf5";const v=function(e,a){const t=(0,s.useRef)(!1),n={error:void 0,data:void 0,loading:!1},[r,o]=(0,s.useReducer)(((e,a)=>{switch(a.type){case"loading":return{...n,loading:!0};case"fetched":return{...n,data:a.payload,loading:!1};case"error":return{...n,error:a.payload,loading:!1};default:return e}}),n);return{...r,fetchData:async function(n,s){void 0===s&&(s={}),o({type:"loading"});try{const r=await fetch(e+(n?`/${n}`:""),{...a,...s});if(!r.ok){let e,a,t;try{t=JSON.parse(await r.text()),e=await r.json(),a=JSON.stringify(e,null,2)}catch{}throw new Error(JSON.stringify(a,null,2)||JSON.stringify(t,null,2)||r.statusText)}const i=await r.json();if(t.current)return;return o({type:"fetched",payload:i}),i}catch(r){if(t.current)return;return o({type:"error",payload:r.message}),null}}}};var y,b=t(7643),g=t(4672);function w(){return w=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},w.apply(this,arguments)}const x=e=>{let{title:a,titleId:t,...n}=e;return s.createElement("svg",w({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":t},n),a?s.createElement("title",{id:t},a):null,y||(y=s.createElement("path",{d:"m10 16.5 6-4.5-6-4.5v9ZM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2Zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8Z",fill:"#0C3F5C"})))};var A;function T(){return T=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},T.apply(this,arguments)}const k=e=>{let{title:a,titleId:t,...n}=e;return s.createElement("svg",T({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":t},n),a?s.createElement("title",{id:t},a):null,A||(A=s.createElement("path",{d:"M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35Z",fill:"#0C3F5C"})))};function I(e){let{req:a,res:t,interactive:n,endpoint:r}=e;const[o,i]=(0,s.useState)(C(a.body)),[d,l]=(0,s.useState)(a.query),[h,c]=(0,s.useState)(X(t.body)),u="string"==typeof a.body&&0==a.body.indexOf("query"),{data:y,error:w,loading:A,fetchData:T}=v(r,{method:a.method,headers:{...a.headers,"Content-Type":u?"application/graphql":"application/json"},body:C(a.body)}),[I,D]=(0,s.useState)(null);(0,s.useEffect)((()=>{A?D("LOADING"):w||null!=y&&y.error?D("ERROR"):y&&D("SUCCESS")}),[y,w,A]);const P=[n?{title:"Run request",onClick:async()=>{const e=await T(d,{body:o});e&&c(X(e))},Component:s.createElement(s.Fragment,null,s.createElement(x,null)," Run")}:null,{title:"Copy",onClick:()=>(0,p.Z)(o),Component:s.createElement(g.Z,{code:"",className:f})},n?{title:"Reset",onClick:()=>{D(null),l(a.query),i(C(a.body)),c(X(t.body))},Component:s.createElement(k,null)}:null].filter((e=>!!e));return s.createElement(s.Fragment,null,s.createElement(m,{header:"GET"===a.method?"Request Query "+(n?"(try it)":""):"Request Body "+(n?"(try it)":""),actions:P,disabled:!n,onValueChange:e=>{n&&("GET"===a.method?l(e):"POST"===a.method&&i(e))}},"GET"===a.method?d:o),s.createElement(b.Z,{title:I?"Response":"Example Response",language:"json"},w?`${w}`:h))}function X(e){return JSON.stringify(e,null,2)}function C(e){return"string"==typeof e?e:JSON.stringify(e,null,2)}const D="heading_REER";var P=t(9960),j=t(3905);const q={toc:[]};function S(e){let{components:a,...t}=e;return(0,j.kt)("wrapper",(0,n.Z)({},q,t,{components:a,mdxType:"MDXLayout"}),(0,j.kt)("details",{open:t.accordionOpen?"open":void 0},(0,j.kt)("summary",null,(0,j.kt)("span",{className:"open"},"Specification"),(0,j.kt)("span",{className:"closed"},"View Specification")),(0,j.kt)(r.D,{mdxType:"ReactMarkdown"},t.details)))}function N(e){let{name:a,content:t="",interactive:n,request:o,accordionOpen:i=!1,response:d,endpoint:l}=e;["Rewards (by epoch)","Rewards (daily)"].includes(a)&&(o.body={...o.body,start_time:new Date(Date.now()-("Rewards (by epoch)"===a?1728e5:864e5)).toISOString().split("T")[0],end_time:(new Date).toISOString().split("T")[0]});const[h,...c]=t.trim().split(/\n+/),m=c.join("\n");return s.createElement(s.Fragment,null,s.createElement("h2",{id:a.toLowerCase(),className:D,"data-method":o.method},s.createElement(P.Z,{to:`#${a.toLowerCase()}`},a)),s.createElement(r.D,null,h),s.createElement(I,{req:o,res:d,interactive:n,endpoint:l}),s.createElement(S,{details:m,accordionOpen:i}),s.createElement("hr",null))}function z(e){let{network:a,methods:t,service:r,proxy:i}=e;return s.createElement(s.Fragment,null,s.createElement("h3",null,"Available Methods"),t.map(((e,t)=>s.createElement(N,(0,n.Z)({key:a+t},e,{endpoint:`${i}/${r}/${a}`,accordionOpen:"node-api"!==r})))),s.createElement(o.Z,null))}S.isMDXComponent=!0},3946:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>d,metadata:()=>h,toc:()=>m});var n=t(7462),s=(t(7294),t(3905)),r=t(3213),o=t(3976),i=(t(7297),t(2750));const d={title:"Avalanche X-Chain",sidebar_position:0,pagination_prev:null,pagination_next:null,collapsed:!0,collapsible:!0,description:"Node API - Avalanche X-Chain",image:"img/logo.svg",keywords:["Node API","Avalanche X-Chain"]},l="Node API - Avalanche X-Chain",h={unversionedId:"api-reference/node-api/avalanche-x-chain",id:"api-reference/node-api/avalanche-x-chain",title:"Avalanche X-Chain",description:"Node API - Avalanche X-Chain",source:"@site/docs/api-reference/node-api/avalanche-x-chain.mdx",sourceDirName:"api-reference/node-api",slug:"/api-reference/node-api/avalanche-x-chain",permalink:"/api-reference/node-api/avalanche-x-chain",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Avalanche X-Chain",sidebar_position:0,pagination_prev:null,pagination_next:null,collapsed:!0,collapsible:!0,description:"Node API - Avalanche X-Chain",image:"img/logo.svg",keywords:["Node API","Avalanche X-Chain"]},sidebar:"docsSidebar"},c={},m=[],u={toc:m};function p(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"node-api---avalanche-x-chain"},"Node API - Avalanche X-Chain"),(0,s.kt)(o.Z,{service:"node-api",methods:[{name:"avm.buildGenesis"},{name:"avm.createAddress"},{name:"avm.createFixedCapAsset"},{name:"avm.mint"},{name:"avm.createVariableCapAsset"},{name:"avm.createNFTAsset"},{name:"avm.mintNFT"},{name:"avm.export"},{name:"avm.exportKey"},{name:"avm.getAllBalances"},{name:"avm.getAssetDescription"},{name:"avm.getBalance"},{name:"avm.getAddressTxs"},{name:"avm.getTx"},{name:"avm.getTxStatus"},{name:"avm.getUTXOs"},{name:"avm.import"},{name:"avm.importKey"},{name:"avm.issueTx"},{name:"avm.listAddresses"},{name:"avm.send"},{name:"avm.sendMultiple"},{name:"avm.sendNFT"},{name:"wallet.issueTx"},{name:"wallet.send"},{name:"wallet.sendMultiple"}],networks:[{label:"Arbitrum",value:"arbitrum"},{label:"Avalanche C-Chain",value:"avalanche-c-chain"},{label:"Avalanche P-Chain",value:"avalanche-p-chain"},{label:"Avalanche X-Chain",value:"avalanche-x-chain"},{label:"BNB",value:"bnb"},{label:"Celo",value:"celo"},{label:"Cosmos LCD",value:"cosmos-lcd"},{label:"Cosmos Tendermint RPC",value:"cosmos-tendermint-rpc"},{label:"Ethereum",value:"ethereum"},{label:"Fantom",value:"fantom"},{label:"Kusama Sidecar",value:"kusama-sidecar"},{label:"Mina GraphQL",value:"mina-graphql"},{label:"NEAR",value:"near"},{label:"Optimism",value:"optimism"},{label:"Osmosis LCD",value:"osmosis-lcd"},{label:"Osmosis Tendermint RPC",value:"osmosis-tendermint-rpc"},{label:"Polkadot Sidecar",value:"polkadot-sidecar"},{label:"Polygon",value:"polygon"},{label:"Solana",value:"solana"}],network:"avalanche-x-chain",mdxType:"ApiReferenceNav"}),(0,s.kt)(i.ZP,{url:"https://avalanche--mainnet--rpc.datahub.figment.io",network:"Avalanche X Chain",service:"Node API",mdxType:"MakingCalls"}),(0,s.kt)(r.S,{methods:[{name:"avm.buildGenesis",content:'Given a JSON representation of this Virtual Machine\u2019s genesis state, create the byte representation of that state.\n\n**Endpoint** - This call is made to the AVM\u2019s static API endpoint: `/ext/vm/avm`\n\nNote: addresses should not include a chain prefix (ie. X-) in calls to the static API endpoint because these prefixes refer to a specific chain.\n\n### Parameters\n\nEncoding specifies the encoding format to use for arbitrary bytes ie. the genesis bytes that are returned. Can only be `hex` when a value is provided.\n\n`genesisData` has this form:\n\n```json\n{\n"genesisData" :\n    {\n        "assetAlias1": {               // Each object defines an asset\n            "name": "human readable name",\n            "symbol":"AVAL",           // Symbol is between 0 and 4 characters\n            "initialState": {\n                "fixedCap" : [         // Choose the asset type.\n                    {                  // Can be "fixedCap", "variableCap", "limitedTransfer", "nonFungible"\n                        "amount":1000, // At genesis, address A has\n                        "address":"A"  // 1000 units of asset\n                    },\n                    {\n                        "amount":5000, // At genesis, address B has\n                        "address":"B"  // 1000 units of asset\n                    },\n                    ...                // Can have many initial holders\n                ]\n            }\n        },\n        "assetAliasCanBeAnythingUnique": { // Asset alias can be used in place of assetID in calls\n            "name": "human readable name", // names need not be unique\n            "symbol": "AVAL",              // symbols need not be unique\n            "initialState": {\n                "variableCap" : [          // No units of the asset exist at genesis\n                    {\n                        "minters": [       // The signature of A or B can mint more of\n                            "A",           // the asset.\n                            "B"\n                        ],\n                        "threshold":1\n                    },\n                    {\n                        "minters": [       // The signatures of 2 of A, B and C can mint\n                            "A",           // more of the asset\n                            "B",\n                            "C"\n                        ],\n                        "threshold":2\n                    },\n                    ...                    // Can have many minter sets\n                ]\n            }\n        },\n        ...                                // Can list more assets\n    }\n}\n```\n\n### Response\n\n- `byes` - string\n- `encoding` - Encoding specifies the encoding format to use for arbitrary bytes.',request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.buildGenesis",params:{networkId:16,genesisData:{asset1:{name:"myFixedCapAsset",symbol:"MFCA",initialState:{fixedCap:[{amount:1e5,address:"avax13ery2kvdrkd2nkquvs892gl8hg7mq4a6ufnrn6"},{amount:1e5,address:"avax1rvks3vpe4cm9yc0rrk8d5855nd6yxxutfc2h2r"},{amount:5e4,address:"avax1ntj922dj4crc4pre4e0xt3dyj0t5rsw9uw0tus"},{amount:5e4,address:"avax1yk0xzmqyyaxn26sqceuky2tc2fh2q327vcwvda"}]}},asset2:{name:"myVarCapAsset",symbol:"MVCA",initialState:{variableCap:[{minters:["avax1kcfg6avc94ct3qh2mtdg47thsk8nrflnrgwjqr","avax14e2s22wxvf3c7309txxpqs0qe9tjwwtk0dme8e"],threshold:1},{minters:["avax1y8pveyn82gjyqr7kqzp72pqym6xlch9gt5grck","avax1c5cmm0gem70rd8dcnpel63apzfnfxye9kd4wwe","avax12euam2lwtwa8apvfdl700ckhg86euag2hlhmyw"],threshold:2}]}}},encoding:"hex"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/vm/avm"},interactive:!0,response:{name:"avm.buildGenesis",body:{jsonrpc:"2.0",result:{bytes:"0x0000000000010006617373657431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f6d794669786564436170417373657400044d464341000000000100000000000000010000000700000000000186a10000000000000000000000010000000152b219bc1b9ab0a9f2e3f9216e4460bd5db8d153bfa57c3c",encoding:"hex"},id:1}}},{name:"avm.createAddress",content:"Create a new address controlled by the given user.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `username` - string\n- `password` - string\n\n### Response\n\n- `address` - New address controlled by the given user.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"avm.createAddress",params:{username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.createAddress",body:{jsonrpc:"2.0",result:{address:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"},id:1}}},{name:"avm.createFixedCapAsset",content:"Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and then no more is ever created. The asset can be sent with `avm.send`.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `name` is a human-readable name for the asset. Not necessarily unique.\n- `symbol` is a shorthand symbol for the asset. Between 0 and 4 characters. Not necessarily unique. May be omitted.\n- `denomination` determines how balances of this asset are displayed by user interfaces. If `denomination` is 0, 100 units of this asset are displayed as 100. If `denomination` is 1, 100 units of this asset are displayed as 10.0. If `denomination` is 2, 100 units of this asset are displayed as 1.00, etc. Defaults to 0.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` and `password` denote the user paying the transaction fee.\n- Each element in `initialHolders` specifies that `address` holds `amount` units of the asset at genesis.\n\n### Response\n\n- `assetID` is the ID of the new asset.\n- `changeAddr` is the address any change sent to.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.createFixedCapAsset",params:{name:"myFixedCapAsset",symbol:"MFCA",initialHolders:[{address:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",amount:1e4},{address:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",amount:5e4}],from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"myUsername",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.createFixedCapAsset",body:{jsonrpc:"2.0",id:1,result:{assetID:"ZiKfqRXCZgHLgZ4rxGU9Qbycdzuq5DRY4tdSNS9ku8kcNxNLD",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"}}}},{name:"avm.mint",content:"Mint units of a variable-cap asset created with `avm.createVariableCapAsset`.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `amount` units of `assetID` will be created and controlled by address `to`.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` is the user that pays the transaction fee. `username` must hold keys giving it permission to mint more of this asset. That is, it must control at least _threshold_ keys for one of the minter sets.\n\n### Response\n\n- `txID` is this transaction\u2019s ID.\n- `changeAddr` in the result is the address where any change was sent.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.mint",params:{amount:1e7,assetID:"i1EqsthjiFTxunrj8WD2xFSrQ5p2siEKQacmCCB5qBFVqfSL2",to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"myUsername",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.mint",body:{jsonrpc:"2.0",id:1,result:{txID:"2oGdPdfw2qcNUHeqjw8sU2hPVrFyNUTgn6A8HenDra7oLCDtja",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"}}}},{name:"avm.createVariableCapAsset",content:"Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using `avm.mint`.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `name` is a human-readable name for the asset. Not necessarily unique.\n- `symbol` is a shorthand symbol for the asset. Between 0 and 4 characters. Not necessarily unique. May be omitted.\n- `denomination` determines how balances of this asset are displayed by user interfaces. If denomination is 0, 100 units of this asset are displayed as 100. If denomination is 1, 100 units of this asset are displayed as 10.0. If denomination is 2, 100 units of this asset are displays as .100, etc.\n- `minterSets` is a list where each element specifies that `threshold` of the addresses in `minters` may together mint more of the asset by signing a minting transaction.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` pays the transaction fee.\n\n### Response\n\n- `assetID` is the ID of the new asset.\n- `changeAddr` in the result is the address where any change was sent.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.createVariableCapAsset",params:{name:"myVariableCapAsset",symbol:"MFCA",minterSets:[{minters:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],threshold:1},{minters:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5","X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5","X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],threshold:2}],from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"myUsername",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.createVariableCapAsset",body:{jsonrpc:"2.0",id:1,result:{assetID:"2QbZFE7J4MAny9iXHUwq8Pz8SpFhWk3maCw4SkinVPv6wPmAbK",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"}}}},{name:"avm.createNFTAsset",content:"Create a new non-fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using `avm.mintNFT`.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `name` is a human-readable name for the asset. Not necessarily unique.\n- `symbol` is a shorthand symbol for the asset. Between 0 and 4 characters. Not necessarily unique. May be omitted.\n- `minterSets` is a list where each element specifies that `threshold` of the addresses in `minters` may together mint more of the asset by signing a minting transaction.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` pays the transaction fee.\n\n### Response\n\n- `assetID` is the ID of the new asset.\n- `changeAddr` in the result is the address where any change was sent.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.createNFTAsset",params:{name:"Coincert",symbol:"TIXX",minterSets:[{minters:["X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"],threshold:1}],from:["X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"myUsername",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.createNFTAsset",body:{jsonrpc:"2.0",result:{assetID:"2KGdt2HpFKpTH5CtGZjYt5XPWs6Pv9DLoRBhiFfntbezdRvZWP",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"},id:1}}},{name:"avm.mintNFT",content:"Mint non-fungible tokens which were created with `avm.createNFTAsset`.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `assetID` is the assetID of the newly created NFT asset.\n- `payload` is an arbitrary payload of up to 1024 bytes. Its encoding format is specified by the `encoding` argument.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- `username` is the user that pays the transaction fee. `username` must hold keys giving it permission to mint more of this asset. That is, it must control at least _threshold_ keys for one of the minter sets.\n\n### Response\n\n- `txID` is this transaction\u2019s ID.\n- `changeAddr` in the result is the address where any change was sent.\n- `encoding` is the encoding format to use for the payload argument. Can only be `hex` when a value is provided.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.mintNFT",params:{assetID:"2KGdt2HpFKpTH5CtGZjYt5XPWs6Pv9DLoRBhiFfntbezdRvZWP",payload:"0x415641204c61627338259aed",to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"myUsername",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.mintNFT",body:{jsonrpc:"2.0",id:1,result:{txID:"2oGdPdfw2qcNUHeqjw8sU2hPVrFyNUTgn6A8HenDra7oLCDtja",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"}}}},{name:"avm.export",content:"Send an asset from the X-Chain to the P-Chain or C-Chain. After calling this method,\nyou must call the C-Chain's `avax.import` or the P-Chain's `platform.importAVAX`to complete the transfer.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `to` is the P-Chain or C-Chain address the asset is sent to.\n- `amount` is the amount of the asset to send.\n- `assetID` is the asset id of the asset which is sent. Use `AVAX` for AVAX exports.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- The asset is sent from addresses controlled by `username`\n- `password` is `username`\u2018s password.\n\n### Response\n\n- `txID` is this transaction\u2019s ID.\n- `changeAddr` in the result is the address where any change was sent.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.export",params:{to:"C-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",amount:10,assetID:"AVAX",from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"myUsername",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.export",body:{jsonrpc:"2.0",result:{txID:"2Eu16yNaepP57XrrJgjKGpiEDandpiGWW8xbUm6wcTYny3fejj",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"},id:1}}},{name:"avm.exportKey",content:"Get the private key that controls a given address. The returned private key can be added to a user with `avm.importKey`.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `username` that control `address`.\n- `address` to get the private key\n\n### Response\n\n- `privateKey` is the string representation of the private key that controls `address`.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.exportKey",params:{username:"myUsername",password:"myPassword",address:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.exportKey",body:{jsonrpc:"2.0",id:1,result:{privateKey:"PrivateKey-2w4XiXxPfQK4TypYqnohRL8DRNTz9cGiGmwQ1zmgEqD9c9KWLq"}}}},{name:"avm.getAllBalances",content:"Get the balances of all assets controlled by a given address.\n\n### Parameters\n\n- `address` to get the balances of all assets.\n\n### Response\n\n- `asset` controlled by a given address.\n- `balances` of all assets.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.getAllBalances",params:{address:"X-avax1c79e0dd0susp7dc8udq34jgk2yvve7hapvdyht"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.getAllBalances",body:{jsonrpc:"2.0",result:{balances:[{asset:"AVAX",balance:"102"},{asset:"2sdnziCz37Jov3QSNMXcFRGFJ1tgauaj6L7qfk7yUcRPfQMC79",balance:"10000"}]},id:1}}},{name:"avm.getAssetDescription",content:"Get information about an asset.\n\n### Parameters\n\n- `assetID` is the id of the asset for which the information is requested.\n\n### Response\n\n- `assetID` is the id of the asset for which the information is requested.\n- `name` is the asset\u2019s human-readable, not necessarily unique name.\n- `symbol` is the asset\u2019s symbol.\n- `denomination` determines how balances of this asset are displayed by user interfaces. If denomination is 0, 100 units of this asset are displayed as 100. If denomination is 1, 100 units of this asset are displayed as 10.0. If denomination is 2, 100 units of this asset are displays as .100, etc.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.getAssetDescription",params:{assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.getAssetDescription",status:"OK",code:200,body:{jsonrpc:"2.0",result:{assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",name:"Avalanche",symbol:"AVAX",denomination:"9"},id:1}}},{name:"avm.getBalance",content:"Get the balance of an asset controlled by a given address.\n\n### Parameters\n\n- `address` owner of the asset\n- `assetID` id of the asset for which the balance is requested\n\n### Response\n\n- `balance` of an asset controlled by a given address.\n- `utxoIDs`\n - `txID`\n - `outputIndex`",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.getBalance",params:{address:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",assetID:"2pYGetDWyKdHxpFxh2LHeoLNCH6H5vxxCxHQtFnnFaYxLsqtHC"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.getBalance",body:{jsonrpc:"2.0",id:1,result:{balance:"299999999999900",utxoIDs:[{txID:"WPQdyLNqHfiEKp4zcCpayRHYDVYuh1hqs9c1RqgZXS4VPgdvo",outputIndex:1}]}}}},{name:"avm.getAddressTxs",content:"Returns all transactions that change the balance of the given address. A transaction is said to change an address's balance if either is true:\n\n- A UTXO that the transaction consumes was at least partially owned by the address.\n- A UTXO that the transaction produces is at least partially owned by the address.\n\n### Parameters\n\n- `address`: The address for which we're fetching related transactions\n- `assetID`: Only return transactions that changed the balance of this asset. Must be an ID or an alias for an asset.\n- `pageSize`: Number of items to return per page. Optional. Defaults to 1024.\n\n### Response\n\n- `txIDs`: List of transaction IDs that affected the balance of this address.\n- `cursor`: Page number or offset. Use this in request to get the next page.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.getAddressTxs",params:{address:"X-avax1sfa23z6vaecfn9v7nwjf8kxgc9uwuu8gfxhyxd",assetID:"AVAX",pageSize:20}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.getAddressTxs",status:"OK",code:200,body:{jsonrpc:"2.0",result:{txIDs:null,cursor:"0"},id:1}}},{name:"avm.getTx",content:'Returns the specified transaction. The `encoding` parameter sets the format of the returned transaction. Can be either `"hex"` or `"json"`. Defaults to "hex".\n\n### Parameters\n\n- `txID` Specific Transaction\'s ID\n- `encoding` parameter sets the format of the returned transaction. Can be either `"hex"` or `"json"`. Defaults to "hex".\n\n### Response\n\n- `credentials` is a list of this transaction\'s credentials. Each credential proves that this transaction\'s creator is allowed to consume one of this transaction\'s inputs. Each credential is a list of signatures.\n- `unsignedTx` is the non-signature portion of the transaction.\n- `networkID` is the ID of the network this transaction happened on. (Avalanche Mainnet is `1`.)\n- `blockchainID` is the ID of the blockchain this transaction happened on. (Avalanche Mainnet X-Chain is `2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM`.)\n- Each element of `outputs` is an output (UTXO) of this transaction that is not being exported to another chain.\n- Each element of `inputs` is an input of this transaction which has not been imported from another chain.\n- Import Transactions have additional fields `sourceChain` and `importedInputs`, which specify the blockchain ID that assets are being imported from, and the inputs that are being imported.\n- Export Transactions have additional fields `destinationChain` and `exportedOutputs`, which specify the blockchain ID that assets are being exported to, and the UTXOs that are being exported.\n\nAn output contains:\n\n- `assetID`: The ID of the asset being transferred. (The Mainnet Avax ID is `FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z`.)\n- `fxID`: The ID of the FX this output uses.\n- `output`: The FX-specific contents of this output.',request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.getTx",params:{txID:"KMcVWV1dJAuWQXfrJgNFFr9uPHqXELQNZoFWoosYVqQV5qGj5",encoding:"json"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.getTx",status:"OK",code:200,body:{jsonrpc:"2.0",result:{tx:{unsignedTx:{networkID:1,blockchainID:"2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",outputs:[{assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",fxID:"spdxUxVJQbX85MGxMHbKw1sHxMnSqJ3QBzDyDYEP3h6TLuxqQ",output:{addresses:["X-avax126rd3w35xwkmj8670zvf7y5r8k36qa9z9803wm"],amount:1530084210,locktime:0,threshold:1}}],inputs:[],memo:"0x",sourceChain:"11111111111111111111111111111111LpoYY",importedInputs:[{txID:"28jfD1CViCz7CKawJBzmHCQRWtk6xwzcBjCVErH6dBo11JLvmw",outputIndex:0,assetID:"FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",fxID:"spdxUxVJQbX85MGxMHbKw1sHxMnSqJ3QBzDyDYEP3h6TLuxqQ",input:{amount:1531084210,signatureIndices:[0]}}]},credentials:[{fxID:"spdxUxVJQbX85MGxMHbKw1sHxMnSqJ3QBzDyDYEP3h6TLuxqQ",credential:{signatures:["0x447ea3c6725add24e240b3179f9cc28ab5410c48f822d32d12459861ca816765297dbfe07e1957e3b470d39e6f56f10269dd7f8c4e108857db874b2c4ba1a22401"]}}]},encoding:"json"},id:1}}},{name:"avm.getTxStatus",content:"Get the status of a transaction sent to the network.\n\n### Parameters\n\n- `txID` ID of the transaction.\n\n### Response\n\n`status` is one of:\n\n- `Accepted`: The transaction is (or will be) accepted by every node\n- `Processing`: The transaction is being voted on by this node\n- `Rejected`: The transaction will never be accepted by any node in the network\n- `Unknown`: The transaction hasn\u2019t been seen by this node",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.getTxStatus",params:{txID:"2QTc8oM1JuopSigxWaKGLt8BMGggxxyg6yG2vV8WUdAjs5vYQW"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.getTxStatus",status:"OK",code:200,body:{jsonrpc:"2.0",result:{status:"Accepted"},id:1}}},{name:"avm.getUTXOs",content:"Gets the UTXOs that reference a given address. If sourceChain is specified, then it will retrieve the atomic UTXOs exported from that chain to the X Chain.\n\n### Parameters\n\n- `utxos` is a list of UTXOs such that each UTXO references at least one address in `addresses`.\n- At most `limit` UTXOs are returned. If `limit` is omitted or greater than 1024, it is set to 1024.\n- If `startIndex` is omitted, will fetch all UTXOs up to `limit`.\n- When using pagination (when `startIndex` is provided), UTXOs are not guaranteed to be unique across multiple calls. That is, a UTXO may appear in the result of the first call, and then again in the second call.\n- When using pagination, consistency is not guaranteed across multiple calls. That is, the UTXO set of the addresses may have changed between calls.\n- `encoding` sets the format for the returned UTXOs. Can only be `hex` when a value is provided.\n\n### Response\n\n- `utxos` is a list of UTXOs such that each UTXO references at least one address in `addresses`.\n- This method supports pagination. `endIndex` denotes the last UTXO returned. To get the next set of UTXOs, use the value of `endIndex` as `startIndex` in the next call.\n- `encoding` sets the format for the returned UTXOs. Can only be `hex` when a value is provided.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.getUTXOs",params:{addresses:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5","X-avax1d09qn852zcy03sfc9hay2llmn9hsgnw4tp3dv6"],limit:5,encoding:"hex"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.getUTXOs",status:"OK",code:200,body:{jsonrpc:"2.0",result:{numFetched:"0",utxos:[],endIndex:{address:"X-avax1d09qn852zcy03sfc9hay2llmn9hsgnw4tp3dv6",utxo:"11111111111111111111111111111111LpoYY"},encoding:"hex"},id:1}}},{name:"avm.import",content:'Finalize a transfer of an asset from the P-Chain or C-Chain to the X-Chain. Before this method is called, you must call the P-Chain\u2019s `platform.exportAVAX` or C-Chain\u2019s `avax.export` method to initiate the transfer.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `to` is the address the AVAX is sent to. This must be the same as the `to` argument in the corresponding call to the P-Chain\u2019s `exportAVAX` or C-Chain\'s `export`.\n- `sourceChain` is the ID or alias of the chain the AVAX is being imported from. To import funds from the C-Chain, use `"C"`.\n- `username` is the user that controls `to`.\n\n### Response\n\n- `txID` is the ID of the newly created atomic transaction.',request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.import",params:{to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",sourceChain:"C",username:"myUsername",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.import",body:{jsonrpc:"2.0",result:{txID:"2gXpf4jFoMAWQ3rxBfavgFfSdLkL2eFUYprKsUQuEdB5H6Jo1H"},id:1}}},{name:"avm.importKey",content:"Give a user control over an address by providing the private key that controls the address.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- Add `privateKey` to `username`\u2018s set of private keys. `address` is the address `username` now controls with the private key.\n\n### Response\n\n- `address` to give user control over this address.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.importKey",params:{username:"myUsername",password:"myPassword",privateKey:"PrivateKey-2w4XiXxPfQK4TypYqnohRL8DRNTz9cGiGmwQ1zmgEqD9c9KWLq"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.importKey",body:{jsonrpc:"2.0",id:1,result:{address:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"}}}},{name:"avm.issueTx",content:"Send a signed transaction to the network. \n\n### Parameters\n\n- `tx` transaction string.\n- `encoding` specifies the format of the signed transaction. Can only be `hex` when a value is provided.\n\n### Response\n\n- `txID` Transaction ID of this transaction.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.issueTx",params:{tx:"0x00000009de31b4d8b22991d51aa6aa1fc733f23a851a8c9400000000000186a0000000005f041280000000005f9ca900000030390000000000000001fceda8f90fcb5d30614b99d79fc4baa29307762668f16eb0259a57c2d3b78c875c86ec2045792d4df2d926c40f829196e0bb97ee697af71f5b0a966dabff749634c8b729855e937715b0e44303fd1014daedc752006011b730",encoding:"hex"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.issueTx",body:{jsonrpc:"2.0",id:1,result:{txID:"NUPLwbt2hsYxpQg4H2o451hmTWQ4JZx2zMzM4SinwtHgAdX1JLPHXvWSXEnpecStLj"}}}},{name:"avm.listAddresses",content:"List addresses controlled by the given user.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `username`\n- `password`\n\n### Response\n\n- `addresses` List of addresses controlled by the given user.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",method:"avm.listAddresses",params:{username:"myUsername",password:"myPassword"},id:1},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.listAddresses",body:{jsonrpc:"2.0",result:{addresses:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"]},id:1}}},{name:"avm.send",content:"Send a quantity of an asset to an address.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- Sends `amount` units of asset with ID `assetID` to address `to`. `amount` is denominated in the smallest increment of the asset. For AVAX this is 1 nAVAX (one billionth of 1 AVAX.)\n- `to` is the X-Chain address the asset is sent to.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- You can attach a `memo`, whose length can be up to 256 bytes.\n- The asset is sent from addresses controlled by user `username`. (Of course, that user will need to hold at least the balance of the asset being sent.)\n\n### Response\n\n- `txID` ID of this transaction.\n- `changeAddr` is the address to which changes was sent to.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.send",params:{assetID:"AVAX",amount:1e4,to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",memo:"hi, mom!",username:"userThatControlsAtLeast10000OfThisAsset",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.send",body:{jsonrpc:"2.0",id:1,result:{txID:"2iXSVLPNVdnFqn65rRvLrsu8WneTFqBJRMqkBJx5vZTwAQb8c1",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"}}}},{name:"avm.sendMultiple",content:"Sends multiple transfers of `amount` of `assetID`, to a specified address from a list of owned addresses.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `outputs` is an array of object literals which each contain an `assetID`, `amount` and `to`.\n- `memo` is an optional message, whose length can be up to 256 bytes.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- The asset is sent from addresses controlled by user `username`. (Of course, that user will need to hold at least the balance of the asset being sent.)\n\n### Response\n\n- `txID` ID of this transaction.\n- `changeAddr` is the address to which changes was sent to.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.sendMultiple",params:{outputs:[{assetID:"AVAX",to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",amount:1e9},{assetID:"26aqSTpZuWDAVtRmo44fjCx4zW6PDEx3zy9Qtp2ts1MuMFn9FB",to:"X-avax18knvhxx8uhc0mwlgrfyzjcm2wrd6e60w37xrjq",amount:10}],memo:"hi, mom!",from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"username",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.sendMultiple",body:{jsonrpc:"2.0",id:1,result:{txID:"2iXSVLPNVdnFqn65rRvLrsu8WneTFqBJRMqkBJx5vZTwAQb8c1",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"}}}},{name:"avm.sendNFT",content:"Send a non-fungible token.\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `assetID` is the asset ID of the NFT being sent.\n- `groupID` is the NFT group from which to send the NFT. NFT creation allows multiple groups under each NFT ID. You can issue multiple NFTs to each group.\n- `to` is the X-Chain address the NFT is sent to.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed. `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- The asset is sent from addresses controlled by user `username`. (Of course, that user will need to hold at least the balance of the NFT being sent.)\n\n### Response\n\n- `txID` ID of this transaction.\n- `changeAddr` is the address to which changes was sent to.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"avm.sendNFT",params:{assetID:"2KGdt2HpFKpTH5CtGZjYt5XPWs6Pv9DLoRBhiFfntbezdRvZWP",groupID:0,to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"myUsername",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X"},interactive:!0,response:{name:"avm.sendNFT",body:{jsonrpc:"2.0",result:{txID:"DoR2UtG1Trd3Q8gWXVevNxD666Q3DPqSFmBSMPQ9dWTV8Qtuy",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"},id:1}}},{name:"wallet.issueTx",content:"Send a signed transaction to the network and assume the tx will be accepted.\n\nThis call is made to the wallet API endpoint:\n\n`/ext/bc/X/wallet`\n\n### Parameters\n\n- `tx` Transaction string\n- `encoding` specifies the format of the signed transaction. Can only be `hex` when a value is provided.\n\n### Response\n\n- `txID` Transaction ID of this transaction.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"wallet.issueTx",params:{tx:"0x00000009de31b4d8b22991d51aa6aa1fc733f23a851a8c9400000000000186a0000000005f041280000000005f9ca900000030390000000000000001fceda8f90fcb5d30614b99d79fc4baa29307762668f16eb0259a57c2d3b78c875c86ec2045792d4df2d926c40f829196e0bb97ee697af71f5b0a966dabff749634c8b729855e937715b0e44303fd1014daedc752006011b730",encoding:"hex"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X/wallet"},interactive:!0,response:{name:"wallet.issueTx",body:{jsonrpc:"2.0",id:1,result:{txID:"NUPLwbt2hsYxpQg4H2o451hmTWQ4JZx2zMzM4SinwtHgAdX1JLPHXvWSXEnpecStLj"}}}},{name:"wallet.send",content:"Send a quantity of an asset to an address and assume the tx will be accepted so that future calls can use the modified UTXO set.\n\nThis call is made to the wallet API endpoint:\n\n`/ext/bc/X/wallet`\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- Sends `amount` units of asset with ID `assetID` to address `to`. `amount` is denominated in the smallest increment of the asset. For AVAX this is 1 nAVAX (one billionth of 1 AVAX.)\n- `to` is the X-Chain address the asset is sent to.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- You can attach a `memo`, whose length can be up to 256 bytes.\n- The asset is sent from addresses controlled by user `username`. (Of course, that user will need to hold at least the balance of the asset being sent.)\n\n### Response\n\n- `txID` Transaction ID of this transaction.\n- `changeAddr` is the address to which change was sent to.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"wallet.send",params:{assetID:"AVAX",amount:1e4,to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",memo:"hi, mom!",from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"userThatControlsAtLeast10000OfThisAsset",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X/wallet"},interactive:!0,response:{name:"wallet.send",body:{jsonrpc:"2.0",id:1,result:{txID:"2iXSVLPNVdnFqn65rRvLrsu8WneTFqBJRMqkBJx5vZTwAQb8c1",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"}}}},{name:"wallet.sendMultiple",content:"Send multiple transfers of `amount` of `assetID`, to a specified address from a list of owned of addresses and assume the tx will be accepted so that future calls can use the modified UTXO set.\n\nThis call is made to the wallet API endpoint:\n\n`/ext/bc/X/wallet`\n\n> Not recommended for use on Mainnet. See warning notice in [Keystore API](https://docs.avax.network/apis/avalanchego/apis/keystore).\n\n### Parameters\n\n- `outputs` is an array of object literals which each contain an `assetID`, `amount` and `to`.\n- `from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.\n- `changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.\n- You can attach a `memo`, whose length can be up to 256 bytes.\n- The asset is sent from addresses controlled by user `username`. (Of course, that user will need to hold at least the balance of the asset being sent.)\n\n### Response\n\n- `txID` Transaction ID of this transaction.\n- `changeAddr` is the address to which change was sent to.",request:{method:"POST",header:[],body:{jsonrpc:"2.0",id:1,method:"wallet.sendMultiple",params:{outputs:[{assetID:"AVAX",to:"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5",amount:1e9},{assetID:"26aqSTpZuWDAVtRmo44fjCx4zW6PDEx3zy9Qtp2ts1MuMFn9FB",to:"X-avax18knvhxx8uhc0mwlgrfyzjcm2wrd6e60w37xrjq",amount:10}],memo:"hi, mom!",from:["X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5"],changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8",username:"username",password:"myPassword"}},url:"https://avalanche--mainnet--rpc.datahub.figment.io",headers:{},query:"ext/bc/X/wallet"},interactive:!0,response:{name:"wallet.sendMultiple",body:{jsonrpc:"2.0",id:1,result:{txID:"2iXSVLPNVdnFqn65rRvLrsu8WneTFqBJRMqkBJx5vZTwAQb8c1",changeAddr:"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8"}}}}],service:"node-api",networks:[{label:"Arbitrum",value:"arbitrum"},{label:"Avalanche C-Chain",value:"avalanche-c-chain"},{label:"Avalanche P-Chain",value:"avalanche-p-chain"},{label:"Avalanche X-Chain",value:"avalanche-x-chain"},{label:"BNB",value:"bnb"},{label:"Celo",value:"celo"},{label:"Cosmos LCD",value:"cosmos-lcd"},{label:"Cosmos Tendermint RPC",value:"cosmos-tendermint-rpc"},{label:"Ethereum",value:"ethereum"},{label:"Fantom",value:"fantom"},{label:"Kusama Sidecar",value:"kusama-sidecar"},{label:"Mina GraphQL",value:"mina-graphql"},{label:"NEAR",value:"near"},{label:"Optimism",value:"optimism"},{label:"Osmosis LCD",value:"osmosis-lcd"},{label:"Osmosis Tendermint RPC",value:"osmosis-tendermint-rpc"},{label:"Polkadot Sidecar",value:"polkadot-sidecar"},{label:"Polygon",value:"polygon"},{label:"Solana",value:"solana"}],network:"avalanche-x-chain",proxy:"https://api-service-proxy.paulpomerleau.workers.dev",mdxType:"APIMethods"}))}p.isMDXComponent=!0}}]);